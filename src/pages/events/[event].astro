---
import type { UseDateTimeFormatOptions } from "sanity";
import AtomButton from "../../components/global/atoms/atom-button.astro";
import AtomSanityImage from "../../components/global/atoms/atom-sanityImage.astro";
import { globalSectionsFields, imageFields } from "../../components/global/utils/cms-queries";
import LayoutDomaine from "../../layouts/Layout-Domaine.astro";
import { Icon } from "astro-icon/components";
import AtomRichContent from "../../components/global/atoms/atom-richContent.astro";
import GlobalSections from "../../components/global/sections/section-GlobalSections.astro";

interface Props {
  content: any,
}

export async function getStaticPaths() {
    const events = await sanityClient.fetch(`
        *[_type == "type_event"]{
          ...,
          partnerLogos[]{${imageFields}},
          speakers[]{..., speakerImage{${imageFields}}, speakerLogo{${imageFields}} },
          thumbnailImage{${imageFields}},
          globalSections{ sections[]{${globalSectionsFields}}}
        }`)
    return events.map((event) => {
        return {
            params: { event: event.slug.current },
            props: { content: event }
        }
    })
}

const { content } = Astro.props
// console.log(content)

const dateOptions: UseDateTimeFormatOptions = {
  weekday: 'long',
  month: 'long',
  day: 'numeric',
};

const timeOptions: UseDateTimeFormatOptions = {
  hour: 'numeric',
  minute: 'numeric',
  hour12: true,
  timeZone: 'America/New_York',
  timeZoneName: 'short'
};

const dateTime = new Date(content.dateTime)
const date = new Intl.DateTimeFormat('en-US', dateOptions).format(dateTime);
const time = new Intl.DateTimeFormat('en-US', timeOptions).format(dateTime);
// console.log(date)
// console.log(time)
---
<LayoutDomaine
  title={`${content.title} | Events`}
>
  <section class="event-main">
    <div class="event-image event-image-large">
      <AtomSanityImage 
        sizes="50vw"
        image={content.thumbnailImage.image}
        aspectRatio={3 / 4}
        cover={true}
      />
    </div>

    <div class="event-info">

      <div class="event-hero">
        <div class="event-image event-image-small">
          <AtomSanityImage 
            sizes="50vw"
            image={content.thumbnailImage.image}
            aspectRatio={3 / 4}
            cover={true}
          />
        </div>
        <div class="event-hero-content">
          <div class="event-title">
            {content.eyebrow && <p class="eyebrow h5">{content.eyebrow}</p>}
            <h1 class="title">{content.title}</h1>
          </div>
          <div class="event-details">
            <div class="date">
              <Icon name="icon-calendar" />
              <span>{date}</span>
            </div>
            <div class="time">
              <Icon name="icon-clock" />
              <span>{time}</span>
            </div>
            <div class="location">
              <Icon name="icon-pin" />
              <div class="location-info">
                <a class="venue h6" href={content.venueUrl}>{content.venue}</a>
                <span class="location-name">{content.location}</span>
              </div>
            </div>
          </div>
        {content.button?.url && content.button?.text && 
          <AtomButton 
            text={content.button.text}
            url={content.button.url}
            newTab={content.button.newTab}
            icon="arrow-diagonal"
          />
        }
        <AtomRichContent 
          content={content.description}
        />
      </div>
      </div>
      {content.partnerLogos &&
        <div class="partners-section">
          <div class="partners-title">
            {content.partnersHeading && <h2 class="h5">{content.partnersHeading}</h2>}
            {content.partnersSubheading && <p class="">{content.partnersSubheading}</p>}
          </div>
          <div class="partner-logos">
            {content.partnerLogos.map((partner) => (
              <div class="partner-logo">
                <AtomSanityImage 
                  sizes="30vw"
                  image={partner.image}
                />
              </div> 
            ))}
          </div>
        </div>
      }
      {content.speakers &&
        <div class="speakers-section">
          <div class="speakers-title">
            {content.speakersHeading && <h2 class="h5">{content.speakersHeading}</h2>}
            {content.speakersSubheading && <p class="">{content.speakersSubheading}</p>}
          </div>
          <div class="speaker-cards">
            {content.speakers.map((speaker) => (
              <div class="speaker-card">
                <div class="speaker-image">
                  <AtomSanityImage 
                    sizes="30vw"
                    image={speaker.speakerImage.image}
                  />
                </div>
                <div class="speaker-info">
                  <div class="speaker-title">
                    <p class="speaker-name h4">{speaker.speakerName}</p>
                    <p>{speaker.speakerRole}</p>
                  </div>
                  <div class="speaker-logo">
                    <AtomSanityImage 
                      sizes="30vw"
                      image={speaker.speakerLogo.image}
                    />
                  </div>
                </div>
              </div> 
            ))}
          </div>
        </div>
      }
    </div>

  </section>

  {content.globalSections && content.globalSections.sections.map((section, i) => (
    <GlobalSections brand="domaine" section={section} key={i} />
))}
</LayoutDomaine>

<style>
  .event-main {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
  }

  .event-hero {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: var(--space-md);
  }

  .event-hero-content {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: var(--space-sm);
  }

  .event-image {
    /* aspect-ratio: 3 / 4; */
  }

  .event-image-large {
    position: sticky;
    top: 0;
    flex: 0 0 50%;
    height: 100lvh;
  }

  .event-image-small {
    display: none;
  }

  .event-info {
    padding-block: calc(var(--header-height) * 1.5) var(--space-lg);
    padding-inline: var(--page-margin);
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: var(--space-xl);
  }

  .event-title {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  .title {
    margin: 0;
  }

  .event-details {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  .date,
  .time,
  .location {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: var(--space-xs);
  }

  .location {
    /* align-items: flex-start; */
  }

  .location-name,
  .venue {
    margin: 0;
  }

  .venue {
    text-decoration: none;
  }

  .location-info {
    display: flex;
    flex-direction: column;
    /* gap: var(--space-xs); */
  }

  .partners-section,
  .speakers-section {
    border-top: 1px solid var(--color-border);
    padding-block: var(--space-lg);
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
    align-self: stretch;
  }

  .partners-title,
  .speakers-title {
    max-width: 36rem;
  }

  .partner-logos {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
  }

  .partner-logo {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: var(--space-md);
  }

  .speaker-cards {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: var(--space-sm);
  }

  .speaker-card {
    flex: 0 1 30rem;
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: var(--space-sm);
  }

  .speaker-info {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: var(--space-xs);
  }

  .speaker-image {
    flex: 0 0 10rem;
  }

  .speaker-logo :global(img) {
    max-width: 6rem;
    max-height: 1.5rem;
    width: auto;
  }

  .speaker-name {
    margin: 0;
  }

  @media screen and (width <= 1024px) {
    .event-image-large {
      display: none;
    }

    .event-image-small {
      display: flex;
      flex: 0 0 40%;
      border-radius: var(--radius-sm);
      overflow: hidden;
    }
  }

  @media screen and (width <= 768px) {

    .event-hero {
      flex-direction: column-reverse;
      align-items: stretch;
    }

    .event-image-small {
      flex: 0 0 auto;
    }
  }

</style>