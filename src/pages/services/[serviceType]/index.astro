---
import { sanityClient } from "sanity:client"
import LayoutDomaine from "../../../layouts/Layout-Domaine.astro"
import { paths } from "../../../components/global/utils/paths"

export async function getStaticPaths() {
    const serviceTypes = await sanityClient.fetch(`*[_type == "type_serviceType" && "Domaine" in agencyBrands[]->name ]`)
    return serviceTypes.map((serviceType) => {
        return {
            params: { serviceType: serviceType.slug.current },
            props: { content: serviceType, serviceType: serviceType }
        }
    })
}

interface Props {
    content: any,
    serviceType: any
}

const { content, serviceType } = Astro.props;
const serviceGroups = await sanityClient.fetch(`*[_type == "type_serviceGroup" && serviceType->_id == '${content._id}' && "Domaine" in agencyBrands[]->name ]{..., serviceType->{...}} | order(orderRank)`)
const servicesObject = await Promise.all(
    serviceGroups.map(async serviceGroup => {
        const services = await sanityClient.fetch(`*[_type == "type_service" && serviceGroup->_id == '${serviceGroup._id}' && "Domaine" in agencyBrands[]->name] | order(orderRank)`)
        serviceGroup.services = await services
        return serviceGroup
    })
);
---
<LayoutDomaine
    title={content.metafields && content.metafields.title ? content.metafields.title : content.title}
    searchFilter="type:service-type"
>
    <h1>{content.title}</h1>
    {servicesObject.map((serviceGroup) => (
        <div>
            <a href={`${paths.root.services.path}/${serviceType.slug.current}/${serviceGroup.slug.current}`}><h3>{serviceGroup.title}</h3></a>
            {serviceGroup.services.map((service) => (
                <a href={`${paths.root.services.path}/${serviceType.slug.current}/${service.slug.current}`}><p>{service.title}</p></a>
            ))}
        </div>
    ))}

</LayoutDomaine>