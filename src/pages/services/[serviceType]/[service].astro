---
import { sanityClient } from "sanity:client"
import LayoutDomaine from "../../../layouts/Layout-Domaine.astro"
import { paths } from "../../../components/global/utils/paths"
import SectionServiceHero from "../../../components/global/services/section-Service-Hero.astro"
import { blogCardFields, projectGridFields } from "../../../components/global/utils/cms-queries"
import SectionProjectsFeed from "../../../components/global/sections/section-ProjectsFeed.astro"
import SectionProjectsGrid from "../../../components/global/sections/section-ProjectsGrid.astro"
import GlobalProjectsGrid from "../../../components/global/projects/global-ProjectsGrid.astro"
import SectionBlogFeed from "../../../components/global/sections/section-BlogFeed.astro"

export async function getStaticPaths() {
    const services = await sanityClient.fetch(`
    *[_type == "type_service" 
        && "domaine" in agencyBrands[]->slug.current 
    ]{
        ..., 
        serviceGroup->{
            ..., 
            serviceType->{...}
        },
        "projects": *[_type == "type_project" && references(^._id)]{${projectGridFields}} | order(orderRank),
        "blogPosts": *[_type == "type_blog" && references(^._id)]{${blogCardFields}} | order(postDate desc)[0...4]
    } | order(orderRank)`)
    return services.map((service) => {
        return {
            params: { serviceType: service.serviceGroup.serviceType.slug.current, service: service.slug.current },
            props: { content: service, serviceGroup: service.serviceGroup, serviceType: service.serviceGroup.serviceType }
        }
    })
}

interface Props {
    content: any,
    serviceType: any,
    serviceGroup: any,
}

const { content, serviceType, serviceGroup } = Astro.props;
console.log(content.blogPosts.length)
---
<LayoutDomaine
    title={content.metafields && content.metafields.title ? content.metafields.title : content.title}
    searchFilter="type:service"
    activePath="/services"
>
    <SectionServiceHero 
        service={content}
    />

    {content.blogPosts && content.blogPosts.length > 0 &&
        <SectionBlogFeed 
            heading={`${content.title} Insights`}
            posts={content.blogPosts}
        />
    }

    {content.projects && content.projects.length > 0 &&
        <GlobalProjectsGrid 
            heading={`${content.title} Work`}
            projects={content.projects}
        />
    }

</LayoutDomaine>