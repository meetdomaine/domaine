---
// SERVER RENDERED AT LOAD TIME
import LayoutProjectsIndex from '../../../layouts/Layout_ProjectsIndex.astro';
import { Brands } from '../../../enums/brands';
import { imageBaseFields, projectGridFields } from '../../../lib/cms-queries';
import { sanityClient } from 'sanity:client';
import { getCollection } from 'astro:content';

const { feature } = Astro.params
const featureContent = await sanityClient.fetch(`
    *[_type == "type_projectFeature" && defined(*[_type == "type_project" && agencyBrand->name == '${Brands.DOMAINE}' && references(^._id) ][0]) && slug.current == '${feature}'][0]{
        _id,
        title,
        excerpt,
        slug, 
        "hasContent": {
        "${Brands.DOMAINE}": defined(*[_type == "type_project" && isHidden != true && agencyBrand->name == '${Brands.DOMAINE}' && references(^._id)][0]),
        },
        "projects": *[_type == "type_project" && agencyBrand->name == '${Brands.DOMAINE}' && isHidden != true && ^.slug.current in features[]->slug.current ]{ slug } | order(orderRank),
        metafields{ title, description, image{${imageBaseFields}} },
    }`
)
if (!featureContent) return Astro.redirect('/404')

const projectSlugs = new Set(featureContent.projects.map(project => project.slug.current))
const projects = await getCollection('projectCards', ({ data }) => projectSlugs.has(data.slug.current))
---
<LayoutProjectsIndex 
    content={featureContent}
    projects={projects.map(project => project.data)}
    currentPath={`/features/${featureContent?.slug?.current}`}
    indexSearch={true}
    brand={Brands.DOMAINE}
/>