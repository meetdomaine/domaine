---
// STATICALLY GENERATED AT BUILD TIME
import LayoutProjectsIndex from '../../../layouts/Layout_ProjectsIndex.astro';
import { Brands } from '../../../enums/brands';
import { imageBaseFields, projectGridFields } from '../../../lib/cms-queries';
import { sanityClient } from 'sanity:client';

export const prerender = true

// TODO: Add type for feature
interface Props {
  content: any
}

export const getStaticPaths = async () => {
  const features = await sanityClient.fetch(`
    *[_type == "type_projectFeature" && defined(*[_type == "type_project" && agencyBrand->name == '${Brands.DOMAINE}' && references(^._id) ][0])]{
        _id,
        title,
        excerpt,
        slug, 
        "hasContent": {
        "${Brands.DOMAINE}": defined(*[_type == "type_project" && isHidden != true && agencyBrand->name == '${Brands.DOMAINE}' && references(^._id)][0]),
        },
        "projects": *[_type == "type_project" && agencyBrand->name == '${Brands.DOMAINE}' && isHidden != true && ^.slug.current in features[]->slug.current ]{${projectGridFields}} | order(orderRank),
        metafields{ title, description, image{${imageBaseFields}} },
    }`)
  return features.map(feature => ({ 
    props: {content: feature},
    params: { feature: feature.slug.current }
   }))
}

const { content } = Astro.props
---
<LayoutProjectsIndex 
    content={content}
    projects={content.projects}
    currentPath={`/features/${content?.slug?.current}`}
    indexSearch={true}
    brand={Brands.DOMAINE}
/>