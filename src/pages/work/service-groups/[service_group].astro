---
import LayoutProjectsIndex from '../../../layouts/Layout_ProjectsIndex.astro';
import { getEntry } from 'astro:content';
import { Brands } from '../../../enums/brands';
import { projectGridFields } from '../../../lib/cms-queries';
import { getServiceGroups } from '../../../lib/cached-content';
import { sanityClient } from 'sanity:client';
const { env } = Astro.locals.runtime;

export async function getStaticPaths() {
    const serviceGroups = await getServiceGroups(Brands.DOMAINE)
    return serviceGroups.map((serviceGroup) => {
        return {
            params: { service_group: serviceGroup.id },
            props: { content: {...serviceGroup.data} }
        }
    })
}

let serviceGroupContent

if (env.SERVER_RENDERING_ENABLED) {
    const { service_group } = Astro.params
    const { data } = await getEntry('serviceGroups', service_group)
    serviceGroupContent = data
} else {
    const { content } = Astro.props
    serviceGroupContent = content
}

const projects = await sanityClient.fetch(`*[_type == "type_project" && agencyBrand->name == '${Brands.DOMAINE}' && isHidden != true && '${serviceGroupContent.id}' in services[]->serviceGroup->slug.current ]{ "id": slug.current, "data":{${projectGridFields}} } | order(data.orderRank)`)
---
<LayoutProjectsIndex
    content={serviceGroupContent}
    projects={projects}
    currentPath={`/services/${serviceGroupContent.id}`}
/>