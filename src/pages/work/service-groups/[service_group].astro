---
// SERVER RENDERED AT LOAD TIME
import LayoutProjectsIndex from '../../../layouts/Layout_ProjectsIndex.astro';
import { Brands } from '../../../enums/brands';
import { imageFields, projectGridFields } from '../../../lib/cms-queries';
import { sanityClient } from 'sanity:client';

export const prerender = true

// TODO: Add type for service group
interface Props {
  content: any
}

export const getStaticPaths = async () => {
  const serviceGroups = await sanityClient.fetch(`*[_type == "type_serviceGroup" && '${Brands.DOMAINE}' in agencyBrands[]->name]{
    ...,
    isHidden,
    excerpt,
    description,
    images[]{${imageFields}},
    agencyBrands[]->{..., slug },
    "projects": *[_type == "type_project" && agencyBrand->name == '${Brands.DOMAINE}' && isHidden != true && ^.slug.current in services[]->serviceGroup->slug.current ]{${projectGridFields}} | order(orderRank),
    "hasContent": {
      "${Brands.DOMAINE}": defined(*[_type == "type_project" && isHidden != true && agencyBrand->name == '${Brands.DOMAINE}' && ^._id in services[]->serviceGroup._ref ][0]),
    },
  }`)
  return serviceGroups.map(serviceGroup => ({ 
    props: {content: serviceGroup},
    params: { service_group: serviceGroup.slug.current }
  }))
}

const { content } = Astro.props
---
<LayoutProjectsIndex
    content={content}
    projects={content.projects}
    currentPath={`/services/${content.slug.current}`}
    brand={Brands.DOMAINE}
/>