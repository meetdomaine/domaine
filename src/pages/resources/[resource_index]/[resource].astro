---
import { sanityClient } from "sanity:client";
import { Locales } from "../../../enums/locales";
import LayoutDomaine from "../../../layouts/Layout-Domaine.astro";
import { globalSectionsFields, imageFields, urlFor, videoFields } from "../../../lib/cms-queries";
import { imageBaseFields } from "../../../lib/cms-queries";
import { getTranslationString } from "../../../lib/translations";
import SectionGlobalSections from "../../../components/global/sections/section-GlobalSections.astro";
import { Brands } from "../../../enums/brands";
import AtomSanityMedia from "../../../components/global/atoms/atom-sanityMedia.astro";
import IconArrowBack from "../../../icons/arrow-back.svg";
import { Translations } from "../../../lib/locales";

const { resource_index, resource } = Astro.params;

const content = await sanityClient.fetch(
  `*[_type == "type_resource" && slug.current == '${resource}'][0]{
    title,
    heading,
    slug,
    colorScheme,
    backgroundColor,
    thumbnail{${videoFields},${imageFields}},
    resourcesIndex->{
      title,
      slug
    },
    heroImage{${imageFields}},
    globalSections{ sections[]{${globalSectionsFields}} },
    metafields{ title, description, image{${imageBaseFields}} },
  }`
);
// console.log(content);
if (!content || content.resourcesIndex.slug.current != resource_index) return Astro.redirect("/404");

const LOCALE = Locales.EN
---
<LayoutDomaine
  title={`${content.metafields?.title ? getTranslationString(content.metafields.title, LOCALE) : getTranslationString(content.title, LOCALE)} | ${getTranslationString(content.resourcesIndex.title, LOCALE)} | ${Translations.RESOURCES.locales[LOCALE] ? Translations.RESOURCES.locales[LOCALE] : Translations.RESOURCES.name}`}
  description={content.metafields?.description ? getTranslationString(content.metafields.description, LOCALE) : null}
  image={content.metafields?.image ? urlFor(content.metafields.image).url() : null}
  activePath={"/resources"}
  showPreloader={true}
  locale={LOCALE}
  searchExposed={false}
  showPreloader={false}
>
  <section 
    class="hero"
    data-color-scheme={content.colorScheme?.trim().replace(/[\u200B-\u200D\uFEFF]/g, '')}
    style={`${content.backgroundColor ? `--color-background: ${content.backgroundColor.hex};` : null}`}
  > 
    <div class="section-title">
      <a href={`/resources/${resource_index}`} class="backlink h5"><IconArrowBack />{getTranslationString(content.resourcesIndex.title)}</a>
      <h1 class="">{getTranslationString(content.heading ? content.heading : content.title)}</h1>
    </div>
    <div 
      class="section-media"
      data-animate-viewport="true" 
      data-animation="fade-up"
      data-animation-delay="200"
    >
      <AtomSanityMedia 
        image={content.heroImage.image}
        video={content.heroImage.video}
        sizes="50vw"
      />
    </div>
  </section>

  {content.globalSections?.sections.map((section, i) => (
    <SectionGlobalSections 
      brand={Brands.DOMAINE}
      locale={LOCALE}
      section={section}
      key={i} 
    />
  ))}
</LayoutDomaine>


<style>
  .hero {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: flex-end;
    /* align-items: center; */
    /* text-align: center; */
    gap: var(--spacing-small);
    /* margin-block: calc(var(--header-height) * 1) 0;
    margin-inline: var(--page-margin); */
    padding-inline: var(--page-margin);
    padding-block: var(--header-height) var(--space-md);
    gap: var(--space-sm);
    background-color: var(--color-background, var(--color-background-secondary));
    /* background-color: var(--color-background-secondary); */
    min-height: 50svh;

    .section-title {
      display: flex;
      flex-direction: column;
      gap: var(--space-sm);
      max-width: 50rem;
      align-self: flex-end;
    }

    .section-media {
      flex: 0 1 30rem;
      padding: var(--space-sm);
    }

    .backlink {
      text-decoration: none;
      display: flex;
      /* align-items: center; */
      gap: 0.4em;
      margin: 0;

      svg {
        /* max-width: 1rem; */
        /* height: 1em; */
        width: 0.8em;
        height: 0.8em;
      }
    }
  }
</style>