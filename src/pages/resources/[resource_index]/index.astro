---
import { sanityClient } from "sanity:client";
import LayoutDomaine from "../../../layouts/Layout-Domaine.astro";
import { Locales } from "../../../enums/locales";
import { getTranslationString } from "../../../lib/translations";
import { globalSectionsFields, imageFields, urlFor, videoFields } from "../../../lib/cms-queries";
import { imageBaseFields } from "../../../lib/cms-queries";
import SectionTextMedia from "../../../components/global/sections/section-TextMedia.astro";
import { Brands } from "../../../enums/brands";
import { getRelativeLocaleUrl } from "astro:i18n";
import AtomButton from "../../../components/global/atoms/atom-button.astro";
import SectionTextMediaBlocks from "../../../components/global/sections/section-TextMediaBlocks.astro";
import SectionGlobalSections from "../../../components/global/sections/section-GlobalSections.astro";
import { Translations } from "../../../lib/locales";

const { resource_index } = Astro.params;

const content = await sanityClient.fetch(
  `*[_type == "type_resources-index" && slug.current == '${resource_index}' && !(_id in path("drafts.**"))][0]{
    title,
    slug,
    heading,
    subheading,
    description,
    button,
    colorScheme,
    backgroundColor,
    contentPagesEyebrow,
    contentPagesHeading,
    "pages": *[_type == "type_resource" && resourcesIndex->slug.current == '${resource_index}' && !(_id in path("drafts.**"))]{
      _id,
      title,
      slug,
      thumbnail{${videoFields},${imageFields}},
      excerpt,
      buttonLabel,
      orderRank
    } | order(orderRank),
    globalSections{ sections[]{${globalSectionsFields}} },
    metafields{ title, description, image{${imageBaseFields}} },
  }`
);
if (!content) return Astro.redirect("/404");

const LOCALE = Locales.EN
---
<LayoutDomaine
  locale={LOCALE}
  title={`${content.metafields?.title ? getTranslationString(content.metafields.title, LOCALE) : getTranslationString(content.title, LOCALE)} | ${Translations.RESOURCES.locales[LOCALE] ? Translations.RESOURCES.locales[LOCALE] : Translations.RESOURCES.name}`}
  description={content.metafields?.description ? getTranslationString(content.metafields.description, LOCALE) : null}
  image={content.metafields?.image ? urlFor(content.metafields.image).url() : null}
>
    <!-- {content.pages.map((page) => (
        <a href={`/content-hub/${resource_index}/${page.slug}`}>{getTranslationString(page.title.text)}</a>
    ))} -->
    <section class="hero" data-color-scheme={content.colorScheme} style={`${content.backgroundColor ? `--color-background: ${content.backgroundColor.hex};` : null}`}>
      <div 
        class="section-title"
        data-animate-viewport="true" 
        data-animation="fade-up"
      >
        <h1 class="h5"><span class="backlink">RESOURCE /&nbsp;</span>{getTranslationString(content.title.text)}</h1>
        <h2 class="h1">{getTranslationString(content.heading.text)}</h2>
      </div>
      <div 
        class="section-content"
        data-animate-viewport="true" 
        data-animation="fade-up"
        data-animation-delay="200"
      >
        <p class="h4">{getTranslationString(content.subheading.text)}</p>
        <p>{getTranslationString(content.description.text)}</p>
        {content.button?.label && content.button?.url &&
          <AtomButton 
              text={getTranslationString(content.button.label.text, LOCALE)}
              url={getRelativeLocaleUrl(LOCALE, content.button.url)}
              newTab={content.button.newTab}
              style="primary"
              icon="arrow-diagonal"
          />
      }
      </div>
    </section>

    <SectionTextMediaBlocks
      section={{
        eyebrow: content.contentPagesEyebrow,
        heading: content.contentPagesHeading,
        blocks: content.pages.map((page) => ({
          heading: page.title,
          subheading: page.excerpt,
          media: page.thumbnail,
          button: {
            label: page.buttonLabel,
            url: `/resources/${resource_index}/${page.slug.current}`
          }
        }))
      }}
      brand={Brands.DOMAINE}
      locale={LOCALE}
    />

    {content.globalSections?.sections.map((section, i) => (
      <SectionGlobalSections 
        brand={Brands.DOMAINE}
        locale={LOCALE}
        section={section}
        key={i} 
      />
    ))}

    <!-- <SectionTextMedia
      section={
        "eyebrow" content.globalSections.sections[0].eyebrow,
        "heading": content.globalSections.sections[0].heading,
        "subheading": content.globalSections.sections[0].subheading,
        "button": content.globalSections.sections[0].button,
        "bulletPoints": content.globalSections.sections[0].bulletPoints,
        "layout": content.globalSections.sections[0].layout,
        "colorScheme": content.globalSections.sections[0].colorScheme,
        "largeText": content.globalSections.sections[0].largeText,
      }
      brand={Brands.DOMAINE}
      locale={LOCALE}
    /> -->
</LayoutDomaine>

<style>
  .hero {
    padding-inline: var(--page-margin);
    padding-block: calc(var(--header-height) * 2) var(--space-2xl);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    gap: var(--space-lg);

    .section-title {
      display: flex;
      flex-direction: column;
      gap: var(--space-sm);
      max-width: 50rem;

      .backlink {
        /* color: var(--color-foreground-secondary); */
        color: color-mix(in srgb, var(--color-background) 50%, var(--color-foreground));
      }
    }

    .section-content {
      max-width: 40rem;
      align-self: flex-end;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-2xs);

      .button {
        margin-top: var(--space-xs);
      }
    }
  }
</style>