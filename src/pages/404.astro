---
// RENDERED STATICALLY ON BUILD
import LayoutDomaine from "../layouts/Layout-Domaine.astro"

export const prerender = true // Make 404 content static so it doesn't refetch on each page load
---

<LayoutDomaine
    title="Page Not Found"
    showPreloader={false}
    disableVisualEditing={true}
>
    <section class="not-found-section">
        <!-- <h2>404</h2> -->
        <h1 class="h1">Whoops!</h1> 
        <p>Page not found.</p>
        <a class="button" href="/work">View our Work</a>
        <div id="three-canvas"></div>
    </section>
</LayoutDomaine>

<script>
    import { 
        Scene, 
        PerspectiveCamera, 
        WebGLRenderer,
        BoxGeometry,
        MeshBasicMaterial,
        ShaderMaterial,
        Vector2,
        Vector3,
        MeshPhysicalMaterial,
        Mesh,
        Group,
        CubeTextureLoader,
        Raycaster
    } from 'three';
    import { gsap } from '../lib/gsap';

    // import * as vertex from '../shaders/vertex.glsl'
    // import * as fragment from '../shaders/frag.glsl'

    const canvas = document.getElementById("three-canvas")
    let canvasRect = canvas.getBoundingClientRect()

    let scene, camera, renderer
    let mousePosition = new Vector2(0, 0)
    const raycaster = new Raycaster();

    const logoGroup = new Group

    const material = new MeshPhysicalMaterial({ 
        color: 0xffffff,
        metalness: 1,
        roughness: 0.9,
        // wireframe: true,
    });

    const shader = new ShaderMaterial( {

        uniforms: {
            time: { value: 1.0 },
            resolution: { value: new Vector2() },
            uMousePosition: { value: mousePosition }
        },

        vertexShader: `
            uniform vec2 uMousePosition;

            varying vec2 vUv;
            varying float vMouseDistance;

            void main() {
                vUv = uv;

                vMouseDistance = distance(uMousePosition, position.xy);  
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);
            }
        `,
        fragmentShader: `
            uniform vec2 uMousePosition;

            varying vec2 vUv;
            varying float vMouseDistance;


            void main() {

                gl_FragColor = vec4(0.0, 0.0, 0.2 * vMouseDistance, 1.0);
            }
        `

    }); 

    const animate = () => {
        gsap.to(logoGroup.rotation, {
            x: - mousePosition.y * 0.25, 
            y: mousePosition.x * 0.25,
            duration: 1,
            ease: "power4.out"
        })

        // shader.uniforms.uMousePosition.value = mousePosition
        gsap.to(shader.uniforms.uMousePosition.value, { 
            x: mousePosition.x,
            y: mousePosition.y,
            duration: 1,
            ease: "power4.out",
        })

        raycaster.setFromCamera( mousePosition, camera );
        const intersects = raycaster.intersectObjects( scene.children );

        // for ( let i = 0; i < intersects.length; i ++ ) {
        //     gsap.to(intersects[i].object.rotation, {
        //         x: "+=0.5",
        //         duration: 2,
        //         ease: "power4.out"
        //     })
        // }

        renderer.render( scene, camera );
    }

    const handleResize = () => {
        canvasRect = canvas.getBoundingClientRect()
        camera.aspect = canvasRect.width / canvasRect.height
        camera.updateProjectionMatrix();
        renderer.setSize( canvasRect.width, canvasRect.height );
    }

    const initScene = () => {
        scene = new Scene();

        scene.environment = new CubeTextureLoader()
            .setPath( 'three/textures/environment/' )
            .load( [
                        'bluecloud_lf.jpg',
                        'bluecloud_rt.jpg',
                        'bluecloud_up.jpg',
                        'bluecloud_dn.jpg',
                        'bluecloud_ft.jpg',
                        'bluecloud_bk.jpg'
                    ], () =>{
                        initGeometry()
                    });
        scene.environmentIntensity = 2

        camera = new PerspectiveCamera( 75, canvasRect.width / canvasRect.height, 0.1, 1000 );
        camera.position.z = 10;

        renderer = new WebGLRenderer({ alpha: true, antialias: true});
        renderer.setSize( canvasRect.width, canvasRect.height );
        renderer.setAnimationLoop( animate );
        renderer.setPixelRatio(window.devicePixelRatio);

        canvas.appendChild(renderer.domElement);

        
    }

    const initGeometry = () => {

        const sizeExtraWide = 2
        const sizeWide = 1.5
        const sizeNormal = 1

        const geometryExtraWide= new BoxGeometry( sizeExtraWide, 1, 1, 20, 10, 10 );
        const geometryWide = new BoxGeometry( sizeWide, 1, 1, 15, 10, 10 );
        const geometryNormal = new BoxGeometry( sizeNormal, 1, 1, 10, 10, 10 );

        const box01 = new Mesh( geometryExtraWide, material );
        box01.position.set(-2.75, sizeNormal, 0)
        box01.rotation.set(0, 0, 0)
        logoGroup.add( box01 );

        const box02 = new Mesh( geometryExtraWide, material );
        box02.position.set(-2.75, sizeNormal * -1, 0)
        logoGroup.add( box02 );

        const box03 = new Mesh( geometryNormal, material );
        box03.position.set(-1.25, 0, 0)
        logoGroup.add( box03 );

        const box04 = new Mesh( geometryWide, material );
        box04.position.set(0, sizeNormal, 0)
        logoGroup.add( box04 );

        const box05 = new Mesh( geometryWide, material );
        box05.position.set(0, -sizeNormal, 0)
        logoGroup.add( box05 );

        const box06 = new Mesh( geometryNormal, material );
        box06.position.set(1.25, 0, 0)
        logoGroup.add( box06 );

        const box07 = new Mesh( geometryNormal, material );
        box07.position.set(2.25, sizeNormal, 0)
        logoGroup.add( box07 );

        const box08 = new Mesh( geometryNormal, material );
        box08.position.set(2.25, -sizeNormal, 0)
        logoGroup.add( box08 );

        const box09 = new Mesh( geometryNormal, material );
        box09.position.set(3.25, 0, 0)
        box09.rotation.set(0, 0, 0)
        logoGroup.add( box09 );

        const loadTimeline = gsap.timeline({ ease: "power4.out"})
        loadTimeline.from(box01.position, { x: -8, y: 8, z: 4, duration: 2 })
        loadTimeline.from(box01.rotation, { z: Math.PI * 2, y: Math.PI, duration: 2}, "<")
        loadTimeline.from(box02.position, { x: -6, y: -8, z: -2, duration: 2 }, "<+=0.05")
        loadTimeline.from(box02.rotation, { z: Math.PI * 2, y: Math.PI, duration: 2}, "<")
        loadTimeline.from(box03.position, { x: -10, y: -1, z: -1, duration: 2 }, "<+=0.05")
        loadTimeline.from(box03.rotation, { z: Math.PI * 2, y: Math.PI, duration: 2}, "<")
        loadTimeline.from(box04.position, { x: -1, y: 6, z: 2, duration: 2 }, "<+=0.05")
        loadTimeline.from(box04.rotation, { z: Math.PI * 2, y: Math.PI, duration: 2}, "<")
        loadTimeline.from(box05.position, { x: 1.5, y: -6, z: -2, duration: 2 }, "<+=0.05")
        loadTimeline.from(box05.rotation, { z: Math.PI * 2, y: Math.PI, duration: 2}, "<")
        loadTimeline.from(box06.position, { x: 3, y: 6, z: -4, duration: 2 }, "<+=0.05")
        loadTimeline.from(box06.rotation, { z: Math.PI * 2, y: Math.PI, duration: 2}, "<")
        loadTimeline.from(box07.position, { x: 6, y: 8, z: -1, duration: 2 }, "<+=0.05")
        loadTimeline.from(box07.rotation, { z: Math.PI * 2, y: Math.PI, duration: 2}, "<")
        loadTimeline.from(box08.position, { x: 8, y: -10, z: 3, duration: 2 }, "<+=0.05")
        loadTimeline.from(box08.rotation, { z: Math.PI * 2, y: Math.PI, duration: 2}, "<")
        loadTimeline.from(box09.position, { x: 8, y: 1, z: 8, duration: 2 }, "<+=0.05")
        loadTimeline.from(box09.rotation, { z: Math.PI * 2, y: Math.PI, duration: 2}, "<")

        scene.add(logoGroup)
    }
    
    if (canvas) { 
        initScene()
    }

    window.addEventListener("mousemove", (e) => {
        const posX = (e.clientX / window.innerWidth - 0.5) * 2
        const posY = - (e.clientY / window.innerHeight - 0.5) * 2
        mousePosition = new Vector2(posX, posY)
    })

    window.addEventListener("resize", handleResize)
    
</script>

<style>
    .not-found-section {
        min-height: 100svh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        position: relative;
    }

    #three-canvas {
        position: absolute;
        inset: 0;
        z-index: -1;
    }

    .button {
        backdrop-filter: var(--background-blur);
        -webkit-backdrop-filter: var(--background-blur);
        background-color: color-mix(in srgb, var(--color-lightest) 40%, transparent);
        color: var(--color-darkest);
        transition: background-color var(--anim-sm), color var(--anim-sm);
    }

    .button:hover {
        background-color: var(--color-brand);
        color: var(--color-brand-contrast);
    }
</style>