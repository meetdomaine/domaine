---
import Layout from '../../../layouts/Layout.astro';
import BlogPostHero from '../../../components/sections/blog/blogPost/BlogPost_Hero.astro';
import BlogPostSidebar from '../../../components/sections/blog/blogPost/BlogPost_Sidebar.astro';
import BlogPostBody from '../../../components/sections/blog/blogPost/BlogPost_Body.astro';
import TextCTA from '../../../components/sections/global/TextCTA.astro';
import { getBlogPosts, getRelatedBlogPosts } from '../../../utils/sanityClient';
import BlogPosts from '../../../components/sections/global/BlogPosts.astro';
import ContactForm from '../../../components/sections/global/ContactForm.astro';

interface Props {
	data: any;
  allPosts: any;
}

// export const prerender = true;

export async function getStaticPaths() {

  const posts = await getBlogPosts();

  return posts.map((post) => {
    return {
      params: { slug: post.slug.current, category: post.category.slug.current },
      props: { data: post, allPosts: posts.filter(otherPost => otherPost.slug.current != post.slug.current ) }
    }
  })
}

const { slug, category } = Astro.params;
const { data, allPosts } = Astro.props;

const sidebarPostCount = 3
const sidebarPosts = allPosts.slice(0, sidebarPostCount)

const relatedPostsCount = 3
const allRelatedPosts = await getRelatedBlogPosts(data)
const relatedPosts = allRelatedPosts.slice(0, relatedPostsCount)
// console.log(data._id)
---

<Layout 
    title="Insights"
    theme="light"
>
    <BlogPostHero
      title={data.title}
      excerpt={data.excerpt}
      image={data.mainImage}
      imageAlt={data.imageAlt}
      category={data.category}
      authors={data.authors}
      date={data.publishedAt}
      id={data._id}
    />

    <div class="blog-post-content">
      <BlogPostBody
        content={data.content}
        authors={data.authors}
      />
      <BlogPostSidebar
        heading={data.sidebar && data.sidebar.heading ? data.sidebar.heading : data.category.callToAction.heading}
        subheading={data.sidebar && data.sidebar.subheading ? data.sidebar.subheading : data.category.callToAction.subheading}
        buttonText={data.sidebar && data.sidebar.buttonText ? data.sidebar.buttonText : data.category.callToAction.buttonText}
        buttonUrl={data.sidebar && data.sidebar.buttonUrl ? data.sidebar.buttonUrl : data.category.callToAction.buttonUrl}
        posts={sidebarPosts}
        category={data.category}
      />
    </div>

    {data.callToAction && data.callToAction.heading && data.callToAction.buttonText && data.callToAction.buttonUrl ? 
      <TextCTA
        heading={data.callToAction.heading}
        subheading={data.callToAction.subheading}
        buttonText={data.callToAction.buttonText}
        buttonUrl={data.callToAction.buttonUrl}
      />
    : null }

    {!data.formOverride || !data.formOverride.hideForm ? 
      <ContactForm 
        heading={data.category.contactFormHeading}
        text={data.category.contactFormText}
        hubspotFormId={data.category.hubspotFormId}
      />
    : null }

    <BlogPosts
      posts={relatedPosts}
    />

</Layout>

<!-- <script is:inline charset="utf-8" type="text/javascript" src="//js.hsforms.net/forms/embed/v2.js"></script>



<script define:vars={{ data }}>
  if (data.formOverride && data.formOverride.formOverrideId && window.hbspt) {
    window.hbspt.forms.create({
          region: "na1",
          portalId: "41750854",
          formId: data.formOverride.formOverrideId,
      });
  }

</script> -->

<style>

  .blog-post-content {
    display: flex;
    flex-direction: row;
    justify-content: stretch;
    align-items: flex-start;
    gap: var(--space-3xl);
    padding: var(--space-3xl) var(--page-margin);
  }

  @media screen and (max-width:768px) {
    .blog-post-content {
    padding: var(--space-lg) var(--page-margin);
      flex-direction: column;
    }
  }

</style>
