---
import { sanityClient } from "sanity:client"
import LayoutStudio from "../../../../layouts/Layout-Studio.astro"
import SectionServiceTypeHero from "../../../../components/global/services/section-ServiceType-Hero.astro"
import SectionServiceGroupFeature from "../../../../components/global/services/section-ServiceGroup-Feature.astro"
import { blogCardFields, projectGridFields } from "../../../../components/global/utils/cms-queries"
import GlobalProjectsGrid from "../../../../components/global/projects/global-ProjectsGrid.astro"
import SectionBlogFeed from "../../../../components/global/sections/section-BlogFeed.astro"

export async function getStaticPaths() {
    const serviceTypes = await sanityClient.fetch(`
        *[_type == "type_serviceType" 
            && "studio" in agencyBrands[]->slug.current ]{
                ...,
                "serviceGroups":  *[_type == "type_serviceGroup" && references(^._id)]{
                    ...,
                    serviceType->{..., slug{...}},
                    "services": *[_type == "type_service" && references(^._id)]{
                        ...
                    } | order(orderRank)
                } | order(orderRank),
                "projects": *[_type == "type_project" && agencyBrand->slug.current == "studio" && ^._id in services[]->serviceGroup->serviceType._ref]{${projectGridFields}}| order(orderRank),
                "blogPosts": *[_type == "type_blog" && agencyBrand->slug.current == "studio" && ^._id in services[]->serviceGroup->serviceType._ref]{${blogCardFields}}| order(postDate),
            }`)
    return serviceTypes.map((serviceType) => {
        return {
            params: { serviceType: serviceType.slug.current },
            props: { content: serviceType }
        }
    })
}

interface Props {
    content: any,
}

const { content } = Astro.props;
// console.log(content.projects.length)
---
<LayoutStudio
    title={content.metafields && content.metafields.title ? content.metafields.title : content.title}
    searchFilter="type:service-type"
>
    <SectionServiceTypeHero
        brand="studio"
        serviceType={content}
    />
    {content.serviceGroups.map((serviceGroup) => (
        <SectionServiceGroupFeature 
            brand="studio"
            serviceGroup={serviceGroup}
        />
    ))}

    {content.blogPosts && content.blogPosts.length > 0 &&
        <SectionBlogFeed 
            heading={`${content.title} Insights`}
            posts={content.blogPosts}
        />
    }

    {content.projects.length > 0 &&
        <GlobalProjectsGrid 
            heading={`${content.title} Work`}
            projects={content.projects}
        />
    }

</LayoutStudio>