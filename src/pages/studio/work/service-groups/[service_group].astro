---
import { getCollection } from 'astro:content';
import { getEntry } from 'astro:content';
import LayoutProjectsIndex from '../../../../layouts/Layout_ProjectsIndex.astro';
import { Brands } from '../../../../enums/brands';
import { loadQuery } from '../../../../lib/sanity-load-query';
import { projectGridFields } from '../../../../lib/cms-queries';
const { env } = Astro.locals.runtime;

export async function getStaticPaths() {
    const serviceGroups = await getCollection('serviceGroups')
    return serviceGroups.filter((serviceGroup) => serviceGroup.data.agencyBrands.some((agencyBrand) => agencyBrand.name === Brands.STUDIO)).map((serviceGroup) => {
        return {
            params: { service_group: serviceGroup.id },
            props: { content: {...serviceGroup.data} }
        }
    })
}

let serviceGroupContent

if (env.SERVER_RENDERING_ENABLED) {
    const { service_group } = Astro.params
    const { data } = await getEntry('serviceGroups', service_group)
    serviceGroupContent = data
} else {
    const { content } = Astro.props
    serviceGroupContent = content
}

const { data: projects } = await loadQuery({ query: `*[_type == "type_project" && agencyBrand->name == '${Brands.STUDIO}' && isHidden != true && '${serviceGroupContent.id}' in services[]->serviceGroup->slug.current ]{ "id": slug.current, "data":{${projectGridFields}} } | order(data.orderRank)`})
---
<LayoutProjectsIndex
    content={serviceGroupContent}
    projects={projects}
    currentPath={`/services/${serviceGroupContent.id}`}
    brand={Brands.STUDIO}
/>