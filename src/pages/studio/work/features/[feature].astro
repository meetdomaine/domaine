---
import { getEntry } from 'astro:content';
import LayoutProjectsIndex from '../../../../layouts/Layout_ProjectsIndex.astro';
import { Brands } from '../../../../enums/brands';
import { loadQuery } from '../../../../lib/sanity-load-query';
import { projectGridFields } from '../../../../lib/cms-queries';
import { getProjectFeatures } from '../../../../lib/cached-content';
const { env } = Astro.locals.runtime;

export async function getStaticPaths() {
    const features = await getProjectFeatures(Brands.STUDIO)
    return features.map((feature) => {
        return {
            params: { feature: feature.id },
            props: { content: {...feature.data} }
        }
    })
}

let featureContent

if (env.SERVER_RENDERING_ENABLED) {
    const { feature } = Astro.params
    const { data } = await getEntry('features', feature)
    featureContent = data
} else {
    const { content } = Astro.props
    featureContent = content
}

const { data: projects } = await loadQuery({ query: `*[_type == "type_project" && agencyBrand->name == '${Brands.STUDIO}' && isHidden != true && '${featureContent.id}' in features[]->slug.current ]{ "id": slug.current, "data":{${projectGridFields}} } | order(data.orderRank)`})
---
<LayoutProjectsIndex 
    content={featureContent}
    projects={projects}
    currentPath={`/features/${featureContent.id}`}
    brand={Brands.STUDIO}
/>