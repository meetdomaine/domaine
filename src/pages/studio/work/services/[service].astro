---
import { getEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import LayoutProjectsIndex from '../../../../layouts/Layout_ProjectsIndex.astro';
import { Brands } from '../../../../enums/brands';
import { loadQuery } from '../../../../lib/sanity-load-query';
import { projectGridFields, projectsGridQuery } from '../../../../lib/cms-queries';
import { getServices } from '../../../../lib/cached-content';
const { env } = Astro.locals.runtime;

export async function getStaticPaths() {
    const services = await getServices(Brands.STUDIO)
    return services.map((service) => {
        return {
            params: { service: service.id },
            props: { content: {...service.data} }
        }
    })
}

let serviceContent

if (env.SERVER_RENDERING_ENABLED) {
    const { service } = Astro.params
    const { data } = await getEntry('services', service)
    serviceContent = data
} else {
    const { content } = Astro.props
    serviceContent = content
}


const { data: projects } = await loadQuery({ query: `*[_type == "type_project" && agencyBrand->name == '${Brands.STUDIO}' && isHidden != true && '${serviceContent.id}' in services[]->slug.current ]{ "id": slug.current, "data":{${projectGridFields}} } | order(data.orderRank)`})
---
<LayoutProjectsIndex
    content={serviceContent}
    projects={projects}
    currentPath={`/services/${serviceContent.id}`}
    brand={Brands.STUDIO}
/>