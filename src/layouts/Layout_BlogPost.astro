---
// Server Component
import LayoutDomaine from '../layouts/Layout-Domaine.astro';
import LayoutStudio from './Layout-Studio.astro';
import SectionBlogFeed from '../components/global/sections/section-BlogFeed.astro';
import BlogPostBody from '../components/global/blog/blog-PostBody.astro';
import BlogPostHero from '../components/global/blog/blog-PostHero.astro';
import BlogPostAuthors from '../components/global/blog/blog-PostAuthors.astro';
import BlogPostSidebar from '../components/global/blog/blog-Post-Sidebar.astro';
import GlobalSections from '../components/global/sections/section-GlobalSections.astro';
import { blogCardFields, urlFor } from '../lib/cms-queries';
import { Translations } from '../lib/locales';
import { Brands } from '../enums/brands';
import { getLocaleString, getTranslationString } from '../lib/translations';
import { getBlogPosts } from '../lib/cached-content';
import { sanityClient } from 'sanity:client';

const { content, locale , brand} = Astro.props;

const latestPosts = await getBlogPosts(brand)
const relatedPosts = await sanityClient.fetch(`*[_type == "type_blog" && agencyBrand->name == '${brand}' && category._ref == '${content.category._id}' && isHidden != true && _id != '${content._id}' ]{${blogCardFields}} | order(postDate desc)`)

const BrandLayout = brand === Brands.STUDIO ? LayoutStudio : LayoutDomaine
---
<BrandLayout
    title={`${content.metafields?.title ? getTranslationString(content.metafields.title, locale) : getTranslationString(content.title, locale)} | ${getLocaleString("INSIGHTS")}`}
    description={content.metafields?.description ? getTranslationString(content.metafields.description, locale) : null}
    image={content.metafields?.image ? urlFor(content.metafields.image).url() : null}
    searchFilter={content.isHidden ? "" : "type:blog-post_domaine"}
    activePath="/insights"
    noIndex={content.isHidden}
    showPreloader={false}
    locale={locale}
    indexSearch={true}
>
    <BlogPostHero
        post={content}
        locale={locale}
    />
    
    <BlogPostBody 
        content={content.body} 
        locale={locale}
        brand={brand}
    >
        <BlogPostSidebar 
            latestPosts={latestPosts.filter((post) => post.slug.current != content.slug.current).slice(0, 3)}
            locale={locale}
            brand={brand}
        />
    </BlogPostBody>

    { content.authors && 
        <BlogPostAuthors 
            authors={content.authors}
            locale={locale}
        />
    }

    {content.globalSections && content.globalSections.sections.map((section, i) => (
        <GlobalSections section={section} key={i} locale={locale} brand={brand} />
    ))}

    { relatedPosts.length > 1 && 
        <SectionBlogFeed 
            heading={locale ? Translations['RELATED-POSTS'].locales[locale] : Translations['RELATED-POSTS'].name}
            posts={relatedPosts}
            locale={locale}
        />
    }
</BrandLayout>