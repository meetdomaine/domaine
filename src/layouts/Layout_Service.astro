---
import LayoutDomaine from "../layouts/Layout-Domaine.astro"
import SectionServiceHero from "../components/global/services/service-Hero.astro"
import { getTranslationString } from "../lib/translations"
import { Brands } from "../enums/brands"
import LayoutStudio from "./Layout-Studio.astro"
import { Translations } from "../lib/locales"
import { getEntry } from "astro:content"
import SectionBlogFeed from "../components/global/sections/section-BlogFeed.astro"
import SectionProjectsFeed from "../components/global/sections/section-ProjectsFeed.astro"
import SectionForm from "../components/global/sections/section-Form.astro"
import SectionGlobalSections from "../components/global/sections/section-GlobalSections.astro"
import { loadQuery } from "../lib/sanity-load-query"
import { blogCardFields, projectGridFields } from "../lib/cms-queries"

const { content, locale, brand, activePath } = Astro.props;

const BrandLayout = brand === Brands.STUDIO ? LayoutStudio : LayoutDomaine

const { data: relatedProjects } = await loadQuery({ query: `*[_type == "type_project" && agencyBrand->name == '${brand}' && isHidden != true && '${content.slug.current}' in services[]->slug.current ]{ "id": slug.current, "data":{${projectGridFields}} } | order(data.orderRank)`})
const { data: relatedPosts } = await loadQuery({ query: `*[_type == "type_blog" && agencyBrand->name == '${brand}' && isHidden != true && '${content.slug.current}' in services[]->slug.current ]{ "id": slug.current, "data":{${blogCardFields}} }|order(data.postDate desc)`})
// const relatedProjects = await Promise.all(content?.relatedProjects?.map( async (project) => await getEntry(brand === Brands.STUDIO ? 'projects_Studio' : 'projects_Domaine', project.slug.current) ))
// const relatedPosts = await Promise.all(content?.relatedPosts?.map( async (post) => await getEntry(brand === Brands.STUDIO ? 'blogPosts_Studio' : 'blogPosts_Domaine', post.slug.current) ))
---
<BrandLayout
  title={`${content.metafields?.title ? getTranslationString(content.metafields.title, locale) : getTranslationString(content.title, locale)} | ${getTranslationString(content.serviceGroup.title, locale)} | ${getTranslationString(content.serviceGroup.serviceType.title, locale)} ${locale ? Translations.SERVICES.locales[locale] : Translations.SERVICES.name}`}
  description={content.metafields?.description ? getTranslationString(content.metafields?.description, locale) : null}
  searchFilter="type:service"
  activePath={activePath}
  showPreloader={true}
>
  <SectionServiceHero
      title={content.title}
      excerpt={content.excerpt}
      description={content.description}
      brand={brand}
      breadcrumbs={[
          {
              title: 'Services /',
              url: `${Astro.url.origin}${brand === Brands.STUDIO ? '/studio/' : '/'}services/`
          },
          {
              title: content.serviceGroup.serviceType?.title,
              url: `${Astro.url.origin}${brand === Brands.STUDIO ? '/studio/' : '/'}services/${content.serviceGroup.serviceType?.slug.current}`
          }
      ]}
      locale={locale}
  />

  {content.pageSections?.map((section, i) => (
    <SectionGlobalSections brand={brand} section={section} key={i} locale={locale} />
  ))}

  {relatedProjects.length > 1 &&
    <SectionProjectsFeed 
        heading={content.title}
        projects={relatedProjects}
        sidebarTitle={content.title}
        locale={locale}
    />
  }

  {content.serviceGroup.serviceType.hubspotFormId &&
    <SectionForm 
      key="serviceType_form"
      hubspotFormId={content.hubspotFormId ? content.hubspotFormId : content.serviceGroup.hubspotFormId ? content.serviceGroup.hubspotFormId : content.serviceGroup.serviceType.hubspotFormId}
      heading={content.formHeading ? content.formHeading : content.serviceGroup.formHeading ? content.serviceGroup.formHeading : content.serviceGroup.serviceType.formHeading}
      text={content.formText ? content.formText : content.serviceGroup.formText ? content.serviceGroup.formText : content.serviceGroup.serviceType.formText}
    />
  }

  {relatedPosts?.length > 2 &&
    <SectionBlogFeed 
        heading={content.title}
        posts={relatedPosts}
        locale={locale}
    />
  }



</BrandLayout>