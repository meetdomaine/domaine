---
import { Icon } from "astro-icon/components"
import AtomSanityImage from "../../../global/atoms/atom-sanityImage.astro"
import { replaceStringIcons } from "../../../global/utils/inline-icon-text"
import AtomCursorFollow from "../../../global/atoms/atom-cursorFollow.astro"

const { heading, subheading, eyebrow, button, projects } = Astro.props

const iconText = replaceStringIcons(heading)

---
<section id="home-hero" class="home-hero" data-color-scheme="brand-02" data-link-hover="false">
    <div class="section-content">
        <div class="section-text h1">
            {eyebrow && <p class="utility">{eyebrow}</p>}
            {heading && <h1 class=""><Fragment set:html={iconText}/></h1>}
            {subheading && <p class="subheading h6">{subheading}</p>}
        </div>
        {button.text && button.url &&
            <a class={`button color-invert`} data-style="tertiary" href={button.url}>{button.text}<Icon name="arrow-diagonal" /></a>
        }
    </div>
    <div class="section-media">
        {projects.map((projectCard, i) => {

            const angle = (i / projects.length) * 360 * (Math.PI / 180)
            const radiusMin = 20;
            const radiusMax = 80;
            const radius = radiusMin + (radiusMax - radiusMin);
            const spreadZ = 20

            const posX = Math.cos(angle) * radius / 2 + 50;
            const posY = Math.sin(angle) * radius / 2 + 50;
            const posZ = Math.random() * spreadZ - spreadZ / 2

            return (
                <a 
                    class="project-card" 
                    data-index={i} 
                    href={`${projectCard.project.agencyBrand.slug.current === "/studio" ? "/studio" : ""}/work/${projectCard.project.slug.current}`}
                    data-project-title={projectCard.project.title} 
                    style={`
                        --index: ${i}; 
                        --total: ${projects.length}; 
                        --random-float: ${Math.random()};

                        --angle: ${angle};
                        --x: ${posX};
                        --y: ${posY};
                        --z: ${posZ};
                    `}
                >
                    <AtomSanityImage 
                        sizes="50vw"
                        image={projectCard.image ? projectCard.image.image : projectCard.project.thumbnailMedia.image}
                    />
                </a>
            )})}
    </div>
    <AtomCursorFollow>
        <div 
            class="project-label" 
            data-color-scheme="glass-dark"
        >
            <Icon name="arrow-diagonal" />
            <p class="project-title">Project Title</p>
        </div>
    </AtomCursorFollow>
</section>

<script>
    const section: any = document.getElementById('home-hero')
    const projectCards = section.querySelectorAll('.project-card')
    const projectTitle = section.querySelector('.project-title')
    let container = section.getBoundingClientRect()

    let activeCard = null

    let mouseX = 0.5
    let mouseY = 0.5

    const updateVariables = () => {
        section.style.setProperty('--image-count', projectCards.length )
        section.style.setProperty('--mouseX', mouseX )
        section.style.setProperty('--mouseY', mouseY )
    }

    projectCards.forEach((projectCard) => {
        projectCard.addEventListener("mouseenter", (e) => {
            projectTitle.innerText = e.target.dataset.projectTitle
            activeCard = {
                element: e.target,
                rect: e.target.getBoundingClientRect()
            }
        })
        projectCard.addEventListener("mouseleave", (e) => {
            e.target.style.setProperty('--hoverX', 0.5 )
            e.target.style.setProperty('--hoverY', 0.5 )
            activeCard = null
        })
    })

    window.addEventListener("mousemove", (e) => {
        mouseX = (e.clientX - container.left) / container.width
        mouseY = (e.clientY - container.top) / container.height
        updateVariables()
        if (activeCard) {
            const rect = activeCard.element.getBoundingClientRect()
            const hoverX = (e.clientX - rect.left) / rect.width
            const hoverY = (e.clientY - rect.top) / rect.height
            activeCard.element.style.setProperty('--hoverX', hoverX )
            activeCard.element.style.setProperty('--hoverY', hoverY )
        }
    })

    updateVariables()

    window.addEventListener("preload:complete", () => {
        projectCards.forEach((projectCard) => projectCard.style.animationPlayState = "running")
    })

</script>

<!-- <script>
    import { isMobileBreakpoint } from "../../../global/utils/check-device"
    import { fadeUp, gsap, addParallax } from "../../../global/utils/gsap"

    import { 
        Scene,
        PerspectiveCamera,
        WebGLRenderer,
        PlaneGeometry,
        MeshBasicMaterial,
        Mesh,
        Group,
        TextureLoader,
        DoubleSide,
        Vector2,
        Vector3,
        LinearSRGBColorSpace,
        SRGBColorSpace,
        Raycaster,
    } from 'three'

    let renderer, scene, camera, imageGroup, meshPositions

    // DOM Elements
    const section = document.getElementById('home-hero')
    const canvas = section.querySelector('#three-canvas')
    const projectCards = section.querySelectorAll('.project-card')
    let container = section.getBoundingClientRect()

    // Camera Settings
    const _cameraDistance = 500
    const _parallaxFactor = 0.1
    // const _parallaxFactor = 50
    let cameraFOV = Math.atan( container.height / 2 / _cameraDistance ) * 2 * (180 / Math.PI)

    // Raycaster
    const raycaster = new Raycaster()
    const mousePosition = new Vector2()
    let raycasterEnabled = false

    const animate = () => {
        
        gsap.to(imageGroup.rotation, {
            x: - Math.PI * mousePosition.y * _parallaxFactor,
            y: Math.PI * mousePosition.x * _parallaxFactor
        })

        // gsap.to(camera.position, {
        //     x: mousePosition.x * _parallaxFactor,
        //     y: mousePosition.y * _parallaxFactor,
        //     ease: 'cubic',
        //     duration: 1.2
        // })

        if (raycasterEnabled) {
            
            raycaster.setFromCamera( mousePosition, camera );
            const intersects = raycaster.intersectObjects( imageGroup.children );

            if (intersects.length <= 0) {
                section.dataset.linkHover = "false"
            } else {
                section.dataset.linkHover = "true"
                for ( let i = 0; i < intersects.length; i ++ ) {
                    console.log(intersects[i])
                    intersects[ i ].object.material.color.set( 0xff0000 );
                }
            }

        }

        renderer.render( scene, camera );
    }

    const animateLoad = () => {

        const _spreadFactor = 0.3
        const _maxDepth = 300

        const animTimeline = gsap.timeline({ defaults: { duration: 2, ease: "cubic"}})
        animTimeline.from(imageGroup.position, {
            y: -container.height,
        })
        animTimeline.to(imageGroup.rotation, {
            x: Math.PI * 2,
            ease: 'power4.inOut',
            onComplete: () => { raycasterEnabled = true }
        }, "<+=0.0")

        for ( let i = 0; i < meshPositions.length; i++) {
            animTimeline.to(meshPositions[i], {
                x: Math.sin( Math.PI * i / meshPositions.length * 2 ) * window.innerWidth * _spreadFactor,
                y: Math.cos( Math.PI * i / meshPositions.length * 2 ) * window.innerHeight * _spreadFactor,
                z: `random(-${_maxDepth / 2}, ${_maxDepth / 2})`,
            }, i === 0 ? "<+=0.8" : "<+=0.05")
        }

        if (!isMobileBreakpoint) {
            window.addEventListener("mousemove", (e) => {
                mousePosition.x = (e.clientX - container.left) / container.width * 2 - 1
                mousePosition.y = - (e.clientY - container.top) / container.height * 2  + 1
            })
        }
    }

    const initImages = async () => {

        imageGroup = new Group()
        imageGroup.position.y = 0
        const loader = new TextureLoader()

        const texturePromises = []

        projectCards.forEach((card, i) => {

            const _width = 100
            const _subdivisions = 20
            const _stackDistance = 20
            const _projectCount = projectCards.length
            
            texturePromises.push( new Promise((resolve, reject) => {
                const image = card.querySelector('img')
                const imageSrc = image.currentSrc

                const imageRect = image.getBoundingClientRect()
                const imageRatio = imageRect.width / imageRect.height

                loader.load(imageSrc, (image) => {
                    image.colorSpace = SRGBColorSpace
                    // image.colorSpace = LinearSRGBColorSpace
                    const geometry = new PlaneGeometry(_width, _width / imageRatio, _subdivisions, _subdivisions)
                    const material = new MeshBasicMaterial({
                        map: image,
                        side: DoubleSide,
                    })
                    const mesh = new Mesh(geometry, material)

                    const startPoint = (_projectCount * _stackDistance) / 2 * -1

                    mesh.position.z = startPoint + _stackDistance * i 

                    imageGroup.add(mesh)
                    resolve(mesh)
                })
            }))
        })

        Promise.all(texturePromises).then((meshes) => {
            meshPositions = meshes.map((mesh) => mesh.position)
            scene.add(imageGroup)
            animateLoad()
        })

    }


    const initScene = () => {
        scene = new Scene();

        camera = new PerspectiveCamera( cameraFOV, container.width / container.height, 0.1, 1000 );
        camera.position.z = _cameraDistance

        renderer = new WebGLRenderer({ antialias: true, alpha: true });
        renderer.setAnimationLoop( animate );
        renderer.setPixelRatio(window.devicePixelRatio)
        renderer.setSize( container.width, container.height );
        renderer.colorSpace = SRGBColorSpace
        // renderer.colorSpace = LinearSRGBColorSpace

        canvas.appendChild( renderer.domElement );

        initImages()
    }

    const handleResize = () => {
        container = section.getBoundingClientRect()
        renderer.setSize( container.width, container.height );
        camera.fov = cameraFOV
        camera.aspect = container.width / container.height
        camera.updateProjectionMatrix();
    }

    window.addEventListener("preload:complete", () => {
        initScene()
    })

    window.addEventListener("resize", handleResize)
</script> -->

<style>



    @media screen and (width >= 768px) {

        .home-hero[data-link-hover="true"] {
            cursor: pointer;
        }

        .section-media {
            --parallax-factor: 5deg;
            transform: rotateX( calc( var(--mouseY) * var(--parallax-factor) * 2 - var(--parallax-factor) )) rotateY( calc( var(--mouseX) * var(--parallax-factor) * 2 - var(--parallax-factor) ));
        }

        .project-card {
            --hover-rotation-factor: 20deg;
        }

        .project-card :global(img) {
            transform: 
                rotateX(calc(var(--hoverY) * var(--hover-rotation-factor) * 2 - var(--hover-rotation-factor))) 
                rotateY(calc( var(--hoverX) * var(--hover-rotation-factor) * 2 - var(--hover-rotation-factor)));
            transition: transform var(--anim-sm);
        }

        .project-card:hover {
            scale: 1.05;
            opacity: 1;
        }
        
        .project-label {
            display: flex;
            flex-direction: row;
            align-items: center;
            gap: var(--space-sm);
            border-radius: var(--radius-sm);
            padding: var(--space-2xs) var(--space-xs);
            clip-path: polygon(0% 0%, 0% 0%, 0% 100%, 0% 100%);
            transition: clip-path var(--anim-sm);
        }

        .home-hero:has(.project-card:hover) .project-label {
            clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
        }

        .project-label :global(svg) {
            flex: 0 0 1rem;
        }

        .project-title {
            flex: 0 0 auto;
            word-wrap: normal;
            word-break: keep-all;
        }

    }

    .home-hero {
        position: relative;
        z-index: 1;
        min-height: 95svh;
        display: flex;
        flex-direction: column;
        justify-content: stretch;
        align-items: stretch;
        overflow: hidden;
    }

    .section-content {
        position: absolute;
        top: 50%;
        left: 50%;
        translate: -50% -50%;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: var(--space-md);
        width: min(60rem, 100%);
        z-index: 1;
        padding-inline: var(--page-margin);
    }

    .section-text {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        gap: var(--space-sm);
    }

    .subheading {
        max-width: 30em;
    }

    .section-media {
        --depth: 60rem;
        --spread: 1rem;
        --entrance-duration: 3s;
        --entrance-easing: cubic-bezier(0.83, 0, 0.17, 1);
        position: relative;
        flex: 1 0 100%;
        z-index: 0;
        padding: var(--space-lg);
        perspective: var(--depth);
        transform-style: preserve-3d;
        animation-play-state: paused;
    }

    .project-card {
        position: absolute;
        transform: translate3d(-50%, -50%, 0);
        transform-origin: 0% 0%;
        width: max(12%, 80px);
        animation: image-card-enter var(--entrance-duration) var(--entrance-easing) calc(var(--random-float) * 0.4s) 1 normal both paused;
        transition: scale var(--anim-sm), opacity var(--anim-sm);
        opacity: 0.9;
    }

    .project-card :global(img) {
        border-radius: var(--radius-sm);
    }

    @keyframes image-card-enter {
        0% {
            top: 120%;
            left: 50%;
            rotate: 1 0 0 360deg;
            transform: translate3d(-50%, -50%, calc(var(--index) * var(--spread)));
        }

        50% {
            top: 50%;
            left: 50%;
            rotate: 1 0 0 360deg;
            transform: translate3d(-50%, -50%, calc(var(--index) * var(--spread)));
        }

        100% {
            top: calc(var(--y) * 1%);
            left: calc(var(--x) * 1%);
            rotate: 1 0 0 0;
            transform: translate3d(-50%, -50%, calc(var(--index) * var(--spread) * var(--random-float)));
        }
    }

    @media screen and (width < 768px) {
    
        .project-label {
            display: none;
        }
    }


</style>