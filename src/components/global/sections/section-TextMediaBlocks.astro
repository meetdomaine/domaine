---
import { getRelativeLocaleUrl } from "astro:i18n"
import AtomButton from "../atoms/atom-button.astro"
import AtomSanityMedia from "../atoms/atom-sanityMedia.astro"
import AtomTag from "../atoms/atom-tag.astro"

const { section, brand, key, locale } = Astro.props
---
<section class="section-text-media-blocks">
  <div class="section-title">
    {section.eyebrow &&
      <AtomTag 
        text={locale && section.eyebrow.translations?.[locale] ? section.eyebrow.translations[locale] : section.eyebrow.text}
      />
    }
    {section.heading && <h2 class="heading h3">{locale && section.heading.translations?.[locale] ? section.heading.translations[locale] : section.heading.text}</h2>}
    {section.button?.label && section.button?.url &&
      <AtomButton 
        text={locale && section.button.label.translations?.[locale] ? section.button.label.translations?.[locale] : section.button.label.text}
        url={locale ? getRelativeLocaleUrl(locale, section.button.url) : section.button.url}
        newTab={section.button.newTab}
        icon="arrow-diagonal"
      />
    }
  </div>
  <div class="section-content" style={`--column-count: ${section.columnCount ? section.columnCount : section.blocks.length}`}>
    {section.blocks.map((block) => (
      <div class="content-block">
        <div class="block-media">
          <AtomSanityMedia 
            sizes="50vw"
            video={block.media.video}
            image={block.media.image}
            aspectRatio={1 / 1}
          />
        </div>
        <div class="block-content">
          {block.heading && <h3 class="block-heading h5">{locale && block.heading.translations?.[locale] ? block.heading.translations[locale] : block.heading.text}</h3>}
          {block.subheading && <p class="block-text">{locale && block.subheading.translations?.[locale] ? block.subheading.translations[locale] : block.subheading.text}</p>}
        </div>
      </div>
    ))}
  </div>
</section>

<style>
  .section-text-media-blocks {
    padding-block: var(--space-2xl);
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: var(--space-xl);
  }

  .section-title {
    padding-inline: var(--page-margin);
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    max-width: 40rem;
    gap: var(--space-xs);
  }

  .section-content {
    padding-inline: var(--page-margin);
    /* flex-wrap: wrap; */
    gap: var(--space-md);
    /* display: grid; */
    /* grid-template-rows: auto; */
    /* grid-auto-rows: 1fr 1fr; */
    display: grid;
    grid-template-columns: repeat(var(--column-count), 1fr);
  }

  .content-block {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
    flex: 0 1 100%;
    /* flex: 1 0 calc(25% - var(--space-sm) ); */
    /* min-width: 20%; */
    /* flex: 0 0 calc(25% - var(--space-sm)); */
  }

  .block-media {
    aspect-ratio: 1 / 1;
    border-radius: var(--radius-sm);
    overflow: hidden;
  }

  @media screen and (width <= 768px) {
    .section-content {
      display: flex;
      flex-direction: row;
      justify-content: stretch;
      overflow-x: auto;
    }

    .content-block {
      min-width: 20rem;
    }
  }
</style>