---
import { Icon } from "astro-icon/components"
import AtomButton from "../atoms/atom-button.astro"
import { getRelativeLocaleUrl } from "astro:i18n"
import { getLocaleUrl, getTranslationString } from "../../../lib/translations"
import { sanityClient } from "sanity:client"
import { imageFields } from "../../../lib/cms-queries"

const { section, brand, key, locale } = Astro.props
const locations = await sanityClient.fetch(`*[_type == "type_location"]{
  ...,
  agencyBrand->{slug},
  images[]{${imageFields}},
  metafields{ title, description, image{crop, asset->{_id, metadata}, hotspot} },
} | order(orderRank)`)
---
<section class="section-locations-feed">
  <div class="section-title">
    {section.heading && <h2 class="heading h2">{getTranslationString(section.heading, locale)}</h2>}
    {section.subheading && <p>{getTranslationString(section.subheading.text, locale)}</p>}
    {section.button?.label && section.button?.url && 
      <AtomButton 
       text={getTranslationString(section.button.label.text, locale)}
       url={getLocaleUrl(section.button.url, locale)}
       newTab={section.button.newTab}
       style="secondary"
      />
    }
  </div>
  <ul class="locations-list">
    <Icon name="icon-globe-outline" class="icon" />
    {locations.map((location) => (
      <li class="location">
        <div class="location-title">
          <p class="city h5">{location.city}</p>
          <p class="country">{location.country}</p>
        </div>
        <div class="clock">
          <Icon name="icon-clock" />
          <p class="location-time" data-timezone={location.timezone}></p>
        </div>
      </li>
    ))}
  </ul>
</section>

<script>
import { getLocalTime } from "../../../lib/get-local-time"
  window.addEventListener("DOMContentLoaded", () => {
    const sections = Array.from(document.getElementsByClassName('section-locations-feed') as HTMLCollectionOf<HTMLElement>) 
    sections.forEach((section) => {
      const clocks = Array.from(section.getElementsByClassName('location-time') as HTMLCollectionOf<HTMLElement>)
      clocks.forEach((clock) => {
        getLocalTime(clock, clock.dataset.timezone, "innerText")
      })
    })
  })
</script>

<style>
  .section-locations-feed {
    padding-block: var(--space-2xl);
    padding-inline: var(--page-margin);
    display: flex;
    /* flex-direction: row; */
    flex-direction: column;
    /* justify-content: space-between; */
    gap: var(--space-2xl);
  }

  .section-title {
    max-width: 32rem;
    align-self: flex-start;
    display: flex;
    flex-direction: column;
    align-items: flex-start;

    .heading {
      align-self: stretch;
    }
  }

  .locations-list {
    display: flex;
    flex-direction: column;
    list-style: none;
    gap: 0;
    width: min(60rem, 100%);
    align-self: flex-end;
    /* margin-top: var(--space-2xl); */
  }

  .icon {
    width: var(--icon-md);
    height: var(--icon-md);
    margin-bottom: 2rem;
  }

  .location {
    border-top: 1px solid var(--color-border);
    margin: 0;
    padding-block: var(--space-xs);
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
  }

  .location-title {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    gap: var(--space-2xs);
  }

  .city {
    margin: 0;
  }

  .country {
    margin: 0;
    color: var(--color-foreground-secondary)
  }

  .clock {
    display: flex;
    flex-direction: row;
    align-items: center;
    /* flex: 0 0 8rem; */
    gap: var(--space-2xs);
    color: var(--color-foreground-secondary);
  }

  .clock :global(svg) {
    width: var(--icon-sm);
    height78: var(--icon-sm);
  }

  .location-time {
    margin: 0;
    width: 4em;
  }
</style>