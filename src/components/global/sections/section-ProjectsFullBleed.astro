---
import { Icon } from "astro-icon/components"
import AtomSanityImage from "../atoms/atom-sanityImage.astro"
import { urlFor } from "../utils/cms-queries"
import AtomTextLabel from "../atoms/atom-textLabel.astro"
const { section } = Astro.props

const id = Math.random().toString(16).slice(2)

// console.log(section.projects[3])
---
<section class="section-projects-fullbleed" id={`media-fullbleed-${id}`}>
    <div class="section-content">
        {section.projects.map((entry, i) => (
            <div class='project-item'>
                <a
                    class="project-link"
                    href={`${entry.project.agencyBrand.slug.current === 'studio' ? '/studio' : null}/work/${entry.project.slug.current}`} 
                    style={entry.project.backgroundColor && `--project-color: ${entry.project.backgroundColor.hex}`}
                >
                    <Icon name={`character-${entry.project.title[0].toUpperCase()}`} class="project-icon" />
                </a>
                <div class="project-image">
                    <AtomSanityImage
                        image={entry.media.image}
                        sizes="110vw"
                        cover={true}
                        aspectRatio={1 / 2}
                    />
                </div>
                <div class="project-preview glass-ink">
                    <AtomTextLabel 
                        text={entry.project.title}
                    />
                    <div class="preview-media">
                        <AtomSanityImage 
                            image={entry.project.thumbnailImageSecondary.image}
                            sizes="50vw"
                        />
                    </div>
                </div> 
            </div>
            
        ))}
    </div>
</section>

<script>
    import { gsap, addParallax } from "../utils/gsap"
    const sections = document.querySelectorAll('.section-projects-fullbleed')

    sections.forEach((section) => {
        const projectImages = section.querySelectorAll('.project-image')
        projectImages.forEach((image) => addParallax(image))

        const followCursor = (e) => {

            let sectionRect = section.getBoundingClientRect();

            window.addEventListener("resize", () => {
                sectionRect = section.getBoundingClientRect();
            })

            const posX = (e.clientX - sectionRect.left) / sectionRect.width
            const posY = (e.clientY - sectionRect.top) / sectionRect.height

            gsap.to('.project-preview', {
                "--mouseX": posX,
                "--mouseY": posY,
                ease: "cubic",
                duration: 0.2
            })
        }

        section.addEventListener("mousemove", (e) => {
            followCursor(e)
        })
    })

</script>

<style>
    .section-projects-fullbleed {
        position: relative;
        --image-inset: var(--space-xs);
        padding: var(--image-inset);
        display: flex;
        flex-direction: column;
    }

    .section-content {
        position: relative;
        align-items: stretch;
        border-radius: var(--radius-md);
        overflow: hidden;
        background-color: var(--color-brand);
    }

    .project-item {
        color: var(--color-brand-contrast);
        padding-inline: var(--space-md);
        padding-block: var(--space-lg);
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-self: stretch;
        width: 100%;
        z-index: 3;
    }



    .project-link {
        position: relative;
        flex: 0 0 40%;
        z-index: 2;
    }

    .project-link:hover {
        color: var(--project-color,  var(--color-brand-contrast));
    }


    .project-icon {
        text-decoration: none;
        /* color: var(--color-brand-contrast); */
        transition: color var(--anim-sm);
        width: 100%;
        height: auto;
    }

    .project-image {
        position: absolute;
        inset: 0;
        width: 100%;
        /* height: 100%; */
        opacity: 0;
        transition: opacity var(--anim-lg);
        z-index: 0;
        pointer-events: none;
    }

    .project-item:first-child .project-image {
        opacity: 1;
    }

    .project-item:has(.project-link:hover) > .project-image {
        opacity: 1;
    }


    .project-preview {
        position: absolute;
        left: calc(100% * var(--mouseX));
        top: calc(100% * var(--mouseY));
        z-index: 3;
        padding: var(--space-xs);
        border-radius: var(--radius-md);
        display: flex;
        flex-direction: column;
        align-items: stretch;
        gap: var(--space-xs);
        color: var(--color-lightest);
        transform-origin: left bottom;
        width: max(20px, 15vw);
        pointer-events: none;
        translate: 0 calc(-100% - var(--space-md));
        transition: clip-path var(--anim-sm);
    }

    

    .preview-image {
    }

    .preview-text {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
    }

    .project-preview .icon {
        width: var(--icon-sm);
        height: var(--icon-sm);
    }

    @media screen and (width > 768px) {

        .project-item:nth-child(4n + 2) {
            justify-content: flex-end;
        }

        .project-item:nth-child(4n + 3) {
            justify-content: center;
        }

        .project-preview {
            clip-path: polygon(0% 100%, 0% 100%, 100% 100%, 100% 100%);
        }

        .project-item:has(.project-link:hover) .project-preview {
            clip-path: polygon(0% 100%, 0% 0%, 100% 0%, 100% 100%);
        }
    }

    @media screen and (width <= 768px) {

        .project-item {
            justify-content: space-between;
            align-items: stretch;
            gap: var(--space-lg)
        }

        .project-item:nth-of-type(even) {
            flex-direction: row-reverse;
        }

        .project-link {
            flex: 1 0 auto;
        }

        .project-preview {
            position: relative;
            clip-path: none;
            top: unset;
            left: unset;
            translate: none;
            flex: 1 0 auto;
        }
    }

</style>