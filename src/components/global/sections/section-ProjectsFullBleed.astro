---
import { Icon } from "astro-icon/components"
import AtomSanityImage from "../atoms/atom-sanityImage.astro"
import { urlFor } from "../utils/cms-queries"
const { section } = Astro.props

const id = Math.random().toString(16).slice(2)
---
<section class="media-fullbleed" id={`media-fullbleed-${id}`}>
    <div class="section-media">
        <div class="background-images">
            {section.projects.map((entry, i) => (
                <div class={`background-image ${i == 0 ? 'active' : ''}`} data-index={i}>
                    <AtomSanityImage
                        image={entry.media.image}
                        sizes="100vw"
                        cover={true}
                    />
                </div>
            ))}
        </div>
    </div>
    <div class="section-content">
        {section.projects.map((entry, i) => (
            <a 
                class='project-title' 
                data-index={i} 
                href={`${entry.project.agencyBrand.slug.current === 'studio' ? '/studio' : null}/work/${entry.project.slug.current}`}
                data-preview-image={urlFor(entry.project.thumbnailImageSecondary.image).width(400).auto('format').url()}
            >
                {entry.project.title}
            </a>
        ))}
    </div>
    <div class="project-preview glass-ink">
        <img class="preview-image" src={urlFor(section.projects[0].project.thumbnailImageSecondary.image).width(400).auto('format').url()} />
        <div class="preview-text">
            <p class="caption">View Project</p>
            <Icon class="icon" name="arrow-diagonal" />
        </div>
    </div>
</section>

<script define:vars={{ id }}>

    const section = document.getElementById(`media-fullbleed-${id}`)
    const projectTitles = section.querySelectorAll('.project-title')
    const projectImages = section.querySelectorAll('.background-image')
    const projectPreview = section.querySelector('.project-preview')
    const previewImage = projectPreview.querySelector('.preview-image')

    let sectionRect = section.getBoundingClientRect();


    window.addEventListener("resize", () => {
        sectionRect = section.getBoundingClientRect();
    })

    projectTitles.forEach((title) => {
        title.addEventListener("mouseover", (e) => {
            projectPreview.classList.add('visible')
            previewImage.src = title.dataset.previewImage
            projectImages.forEach((image) => {
                if (image.dataset.index === title.dataset.index) return image.classList.add('active')
                return image.classList.remove('active')
            })
        })
        title.addEventListener("mouseleave", (e) => {
            projectPreview.classList.remove('visible')
        })
    })

    const followCursor = (e) => {
        console.log('follow')
        const x = e.clientX - sectionRect.left;
        const y = e.clientY - sectionRect.top + window.scrollY;
        projectPreview.style.left = `${x}px`
        projectPreview.style.top = `${y}px`
    }

    const delay = 40
    let timeout = null

    section.addEventListener("mousemove", (e) => {
        if(!timeout) {
            followCursor(e)
            timeout = setTimeout(() => {
                timeout = null
            }, delay)
        }
    })

</script>

<style>
    .media-fullbleed {
        position: relative;
        --image-inset: var(--space-xs);
        padding: var(--image-inset);
        display: flex;
        flex-direction: column;
    }

    .section-content {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 0;
        padding-inline: var(--space-md);
        padding-block: 50dvh;
        border-radius: var(--radius-md);
        overflow: hidden;
        margin-top: -100dvh;
    }

    .project-title {
        font-size: 14vw;
        font-weight: 400;
        letter-spacing: -0.05em;
        margin: 0;
        position: relative;
        z-index: 2;
        padding-block: var(--space-lg);
        text-decoration: none;
        color: transparent;
        background-color: var(--color-background-translucent);
        color: transparent;
        background-clip: text;
        -webkit-background-clip: text;
        z-index: 2;
        transition: color var(--anim-sm);
    }

    .project-title:hover {
        color: var(--color-brand-contrast);

    }

    .section-media {
        width: 100%;
        height: calc(100dvh - var(--image-inset) * 2);
        position: sticky;
        top: var(--image-inset);
        border-radius: var(--radius-md);
        overflow: hidden;
    }

    .background-images {
        position: relative;
        width: 100%;
        height: 100%;
    }

    .background-image {
        position: absolute;
        inset: 0;
        opacity: 0;
        scale: 1.1;
        transition: opacity var(--anim-sm), scale var(--anim-lg);
        transition-delay: 0.1s;
    }
    
    .background-image.active {
        opacity: 1;
        scale: 1;
        transition-delay: 0s;
    }

    .project-preview {
        position: absolute;
        z-index: 3;
        padding: var(--space-2xs);
        border-radius: var(--radius-sm);
        display: flex;
        flex-direction: column;
        align-items: stretch;
        gap: var(--space-xs);
        color: var(--color-lightest);
        width: max(20px, 15vw);
        translate: 5% -105%;
        pointer-events: none;
        opacity: 0;
        transition: opacity var(--anim-sm), top var(--anim-sm) 0s, left var(--anim-sm) 0s;
    }

    .project-preview.visible {
        opacity: 1;
    }

    .preview-image {
    }

    .preview-text {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
    }

    .project-preview .icon {
        width: var(--icon-sm);
        height: var(--icon-sm);
    }

</style>