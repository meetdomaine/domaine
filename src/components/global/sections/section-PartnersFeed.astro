---
import { getRelativeLocaleUrl } from "astro:i18n"
import AtomButton from "../atoms/atom-button.astro"
import GlobalPartnerTile from "../partners/global-PartnerTile.astro"
import { getPartners } from "../../../lib/cached-content"

const { section, brand, locale } = Astro.props


const partnerTileCount = 4

const partners = await getPartners(brand)
---
<section class="section-partners-feed" data-color-scheme="brand-02">
    <div 
        class="section-title"
        data-animate-viewport="true"
        data-animation="fade"
    >
        {section.eyebrow && <p class="eyebrow h5">{locale && section.eyebrow.translations?.[locale] ? section.eyebrow.translations[locale] : section.eyebrow.text }</p>}
        <h2 class="heading">{locale && section.heading.translations?.[locale] ? section.heading.translations[locale] : section.heading.text }</h2>
        { section.button?.label.text && section.button?.url &&
            <div class="button-wrapper-primary">
                <AtomButton
                    text={locale && section.button.label.translations?.[locale] ? section.button.label.translations[locale] : section.button.label.text }
                    url={locale ? getRelativeLocaleUrl(locale, section.button.url) : section.button.url}
                    newTab={false}
                    icon="arrow-diagonal"
                    fill={true}
                />
            </div>
        }
    </div>
    <div class="section-content">
        <div class="partners">
            {partners.slice(0, 7).map((partner, i) => (
                <div 
                    class="partner-tile-wrapper color-reset"
                    data-animate-viewport="true"
                    data-animation="fade-up"
                >
                    <GlobalPartnerTile 
                        locale={locale}
                        partner={partner}
                        theme="light"
                    />
                </div>
            ))}
        </div>
        <div 
            class="button-wrapper-secondary"
            data-animate-viewport="true"
            data-animation="fade-up"
        >
        { section.linkText &&
            <AtomButton
                text={locale && section.linkText.translations?.[locale] ? section.linkText.translations[locale] : section.linkText.text }
                url={locale ? getRelativeLocaleUrl(locale, "/partners") : "/partners"}
                newTab={false}
                style="secondary"
                icon="arrow-diagonal"
                invert={true}
            />
        }
        </div>
    </div>
</section>

<style>
    .section-partners-feed {
        padding-inline: var(--page-margin);
        padding-block: var(--space-3xl);
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        gap: var(--space-lg);
    }

    .section-title {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        flex: 0 1 40em;
        gap: var(--space-sm);
    }

    .button-wrapper-primary {
        min-width: min(30em, 100%);
    }

    .section-content {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        /* max-width: 30em; */
        flex: 0 0 clamp(20em, 40%, 25em);
        gap: var(--space-md);
    }

    .partners {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        gap: var(--space-xs);
    }

    .partner-tile-wrapper {
        background-color: transparent;
    }

    @media screen and (width < 768px) {


        .section-title {
            flex: 0 0 auto;
        }

        .section-partners-feed {
            flex-direction: column;

        }

        .partners {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: stretch;
        }

        .partner-tile-wrapper {
            flex: 1 0 calc(50% - var(--space-xs));
            /* max-width: 30em; */
            min-width: 24em;
        }
    }
</style>