---
import AtomSanityImage from "../atoms/atom-sanityImage.astro"
import AtomServiceLink from "../atoms/atom-serviceLink.astro"
import AtomButton from "../atoms/atom-button.astro"
import { getRelativeLocaleUrl } from "astro:i18n"
import { checkIsJumplink } from "../../../lib/functions"
import { getLocaleUrl, getTranslationString } from "../../../lib/translations"
import { Brands } from "../../../enums/brands"


const { section, brand, key, locale } = Astro.props

const currentSlug = brand === "studio" ? "/studio/" : "/"

const heading = section.heading ? section.heading : section.featuredService.title
const subheading = section.subheading ? section.subheading : section.featuredService.excerpt
// TODO: Optimize logic
---
<section class="section-service-type" id={`service-type-${section.featuredService.slug.current}`}>
    <h2 aria-label={section.featuredService?.title}>
        {section.featuredService.isHidden ?
            <div 
              aria-hidden="true"
              class={`service-type-title ${section.headingSize === "small" ? 'h1' : 'title-xl'}`}
            >
              {locale && heading.translations?.[locale] ? heading.translations[locale] : heading.text}
            </div>
            :
            <a 
                aria-hidden="true"
                href={getLocaleUrl(`${brand === Brands.STUDIO ? "/studio/" : "/"}services/${section.featuredService._type === "type_serviceGroup" ? `${section.featuredService.serviceType.slug.current}/` : ""}${section.featuredService.slug.current}/`, locale)} 
                class={`service-type-title ${section.headingSize === "small" ? 'h1' : 'title-xl'}`}
            >
                {locale && heading.translations?.[locale] ? heading.translations[locale] : heading.text}
            </a>
        }
    </h2>

    <div class="section-content">
        <p 
            class={`service-type-subheading ${section.headingSize === "small" ? 'h6' : 'h4'}`}
        >
            {locale && subheading.translations?.[locale] ? subheading.translations[locale] : subheading.text}
        </p>

        {section.button?.label && section.button?.url &&
            <AtomButton 
                text={locale && section.button.label.translations?.[locale] ? section.button.label.translations[locale] : section.button.label.text}
                url={checkIsJumplink(section.button.url) ? section.button.url : locale ? getRelativeLocaleUrl(locale, section.button.url) : section.button.url}
                newTab={section.button.newTab}
                style="primary"
                icon="arrow-diagonal"
                classList="service-feature-btn"
            />
        }

        <div class="service-groups">
            {section.featuredService._type === "type_serviceType" ? 
                section.featuredService.serviceGroups.filter((group) => group.agencyBrands.some((brand) => brand.slug.current === currentSlug)).map((serviceGroup) => (
                    <div class="services">
                        {serviceGroup.isHidden ? 
                            <div class="service-group-title h6">{getTranslationString(serviceGroup.title, locale)}</div>
                            :
                            <a 
                                class="service-group-title h6" 
                                href={getLocaleUrl(`${brand === Brands.STUDIO ? "/studio/" : "/"}services/${section.featuredService.slug.current}/${serviceGroup.slug.current}`, locale)}
                            >
                                {getTranslationString(serviceGroup.title, locale)}
                            </a>
                        }
                        {serviceGroup.services.filter((service) => service.agencyBrands.some((brand) => brand.slug.current === currentSlug)).map((service) => (
                            <AtomServiceLink 
                                title={getTranslationString(service.title, locale)}
                                url={getLocaleUrl(`${brand === Brands.STUDIO ? "/studio/" : "/"}services/${section.featuredService.slug.current}/${service.serviceGroup.slug.current}/${service.slug.current}`, locale)}
                                excerpt={getTranslationString(service.excerpt, locale)}
                                isHidden={service.isHidden}
                            />
                        ))}
                    </div>
                )) : 
                section.featuredService.services.filter((service) => service.agencyBrands.some((brand) => brand.slug.current === currentSlug)).map((service) => (
                    <AtomServiceLink 
                        title={getTranslationString(service.title, locale)}
                        url={getLocaleUrl(`${brand === Brands.STUDIO ? "/studio/" : "/"}services/${service.serviceGroup.serviceType.slug.current}/${service.serviceGroup.slug.current}/${service.slug.current}`)}
                        excerpt={getTranslationString(service.excerpt, locale)}
                        isHidden={service.isHidden}
                    />
                ))
            }
        </div>
    </div>
    <div class="section-media">
        {section.featuredService.images && section.featuredService.images.slice(0,3).map((asset, i) => (
            <div class="service-image" data-animate-viewport="true" data-animation="clip-left" data-animation-delay={i * 40}>
                <AtomSanityImage 
                    image={asset.image}
                    sizes="30vw"
                    cover={true}
                />
            </div>
        ))}
    </div>
</section>

<script>
// import { addParallax, gsap } from "../../../lib/gsap"
// import { isMobileBreakpoint } from "../../../lib/check-device"

// if (!isMobileBreakpoint) {
//     const sections = document.querySelectorAll('.section-service-type')

//     const _parallaxStrength = 30

//     sections.forEach((section) => {

//         const images = section.querySelectorAll('.service-image')

//         images.forEach((image) => {

//             const timeline = gsap.timeline({
//                 scrollTrigger: {
//                     trigger: image,
//                     start: 'top bottom',
//                     end: 'bottom top',
//                     scrub: true,
//                 }
//              })
            
//             timeline.fromTo(image, { y: _parallaxStrength }, { y: -_parallaxStrength });
//         })
        
//     })
// }
</script>

<style>
    .section-service-type {
        position: relative;
        padding-inline: var(--page-margin);
        padding-block: var(--space-4xl) var(--space-4xl);
        display: flex;
        flex-direction: column;
        align-items: stretch;
        gap: var(--space-lg);
    }

    .service-type-title {
        position: relative;
        text-decoration: none;
        z-index: 2;
    }

    .section-content {
        position: relative;
        display: flex;
        flex-direction: column;
        gap: var(--space-lg);
        width: 85%;
        align-self: flex-end;
        z-index: 1;
    }

    .service-type-subheading {
        max-width: 24em;
    }

    .section-content :global(.service-feature-btn) {
        max-width: 14rem;
    }

    .service-groups {
        display: flex;
        flex-direction: column;
        max-width: 35rem;
        padding: var(--space-xs);
        border-radius: var(--radius-sm);
    }

    .services {
        display: flex;
        flex-direction: column;
    }

    .service-group-title {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        border-bottom: 1px solid var(--color-foreground);
        padding-block: 0.5em;
        margin: var(--space-md) 0 0;
        text-decoration: none;
    }

    .service-group-title:hover {
        color: var(--color-foreground);
    }

    .service-title {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .section-media {
        position: absolute;
        inset: 0;
        display: grid;
        grid-template-columns: 2fr 2fr 2fr 1fr 1fr 1fr;
        grid-template-rows: repeat(4, 1fr);
        z-index: 0;
        aspect-ratio: 4 / 3;
    }

    /* .service-image {
        position: relative;
        height: 100%;
        min-height: 0;
    } */

    .section-service-type:nth-of-type(4n + 1) {

    }
        
    /* Every First instance */
    .service-image:nth-child(1) {
        grid-column: 6 / span 1;
        grid-row: 1 / span 1;
    }

    .service-image:nth-child(2) {
        grid-column: 4 / span 2;
        grid-row: 2 / span 1;
    }

    /* Every Fourth instance */
    .section-service-type:nth-of-type(4n + 1) .service-image:nth-child(1) {
        grid-column: 4 / span 1;
        grid-row: 1 / span 1;
    }

    .section-service-type:nth-of-type(4n + 1) .service-image:nth-child(2) {
        grid-column: 5 / span 1;
        grid-row: 2 / span 1;
    }

    /* Every Second instance */
    .section-service-type:nth-of-type(4n + 3) .service-image:nth-child(1) {
        grid-column: 5 / span 1;
        grid-row: 1 / span 1;
    }

    .section-service-type:nth-of-type(4n + 3) .service-image:nth-child(2) {
        grid-column: 6 / span 1;
        grid-row: 2 / span 1;
    }

    /* Every Third instance */
    .section-service-type:nth-of-type(4n + 4) .service-image:nth-child(1) {
        grid-column: 5 / span 1;
        grid-row: 2 / span 1;
    }

    .section-service-type:nth-of-type(4n + 4) .service-image:nth-child(2) {
        grid-column: 6 / span 1;
        grid-row: 4 / span 1;
    }

    
    @media screen and (width <= 768px) {
        .section-content {
            width: 100%;
        }

        .service-groups {
            padding: 0;
        }

        .service-detail {
            display: none;
        }

        .section-media {
            position: relative;
            grid-template-columns: var(--grid-template-extreme-1);
            grid-auto-rows: 1fr;
            /* grid-template-rows: repeat(3, 1fr); */
            height: 50svh;
            width: 100%;
        }

        .service-image:nth-child(3n + 1) {
            grid-column: 2 / span 1;
            grid-row: 1 / span 1;
        }

        .service-image:nth-child(3n + 2) {
            grid-column: 3 / span 1;
            grid-row: 2 / span 1;
        }

        .service-image:nth-child(3n + 3) {
            grid-column: 1 / span 1;
            grid-row: 3 / span 1;
        }

        .section-service-type:nth-child(even) .service-image:nth-child(3n + 1) {
            grid-column: 3 / span 1;
            grid-row: 1 / span 1;
        }

        .section-service-type:nth-child(even) .service-image:nth-child(3n + 2) {
            grid-column: 1 / span 1;
            grid-row: 2 / span 1;
            /* opacity: 0; */
        }

        .section-service-type:nth-child(even) .service-image:nth-child(3n + 3) {
            grid-column: 2 / span 1;
            grid-row: 3 / span 1;
            /* opacity: 0; */
        }
    }
</style>