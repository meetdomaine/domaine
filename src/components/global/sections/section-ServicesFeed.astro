---
import AtomTag from "../atoms/atom-tag.astro";
import AtomSanityImage from "../atoms/atom-sanityImage.astro";
import { getServiceTypes_Studio, getServiceTypes_Domaine } from "../utils/cms-content";
import { Icon } from "astro-icon/components";
import AtomButton from "../atoms/atom-button.astro";
import { getRelativeLocaleUrl } from "astro:i18n";

const { section, brand, locale, key } = Astro.props

const serviceTypes = brand === "studio" ? await getServiceTypes_Studio() : await getServiceTypes_Domaine()
---
<section class="section-services-feed" id={`section-services-feed-${key}`}>

    <div class="section-content">
        <div class="section-title">
            {section.heading && <h2 class="heading h5">{locale && section.heading.translations?.[locale] ? section.heading.translations?.[locale] : section.heading.text}</h2>}
            {section.subheading && <p class="subheading">{locale && section.subheading.translations?.[locale] ? section.subheading.translations?.[locale] : section.subheading.text}</p>}
        </div>
        <div class="service-types">
            {serviceTypes.map((serviceType, i) => (
                <div class="service-type">
                    <a 
                        class="service-type__button h1" 
                        data-animate-viewport="true"
                        data-animation="fade"
                        data-slug={serviceType.slug.current}
                        href={serviceType.isHidden ? null : `/services/${serviceType.slug.current}`}
                    >
                        {locale && serviceType.title?.translations?.[locale] ? serviceType.title?.translations?.[locale] : serviceType.title.text}
                        
                        {/* <Icon name="arrow-diagonal" class="service-type__icon" /> */}
                    </a>

                    <div class="services">
                        <div 
                            class="service-type__groups" 
                            data-slug={serviceType.slug.current}
                            data-active="false"
                        >
                            {serviceType.serviceGroups.map((serviceGroup) => (
                                <div class="service-type__group">
                                    <div class="service-type__services">
                                        <a 
                                            class="service-type__group-title h6" 
                                            href={serviceGroup.isHidden ? null : `${brand === "studio" ? "/studio": ""}/services/${serviceType.slug.current}/${serviceGroup.slug.current}`}
                                        >{locale && serviceGroup.title?.translations?.[locale] ? serviceGroup.title.translations[locale] : serviceGroup.title.text}</a>
                                        {serviceGroup.services.map((service, i) => (
                                            <AtomTag 
                                                text={locale && service.title?.translations?.[locale] ? service.title.translations[locale] : service.title.text}
                                                url={service.isHidden ? null : `${locale ? `/${locale}` : ""}${brand === "studio" ? "/studio": ""}/services/${serviceType.slug.current}/${service.slug.current}`}
                                            />
                                        ))}
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                    <div class="service-type__description body">{locale && serviceType.excerpt?.translations?.[locale] ? serviceType.excerpt.translations[locale] : serviceType.excerpt.text}</div>
                </div>
                <div class="section-media"
                    data-animate-viewport="true"
                    data-animation="fade"
                    data-animation-delay={400}
                >
                    {serviceType.images.slice(0, 4).map((imageObject) => (
                        <div 
                            class="service-image"
                        >
                            <AtomSanityImage 
                                image={imageObject.image}
                                sizes="30vw"
                                cover={true}
                            />
                        </div>
                    ))}
                </div>
            ))}
        </div>

        {section.button?.label && section.button?.url && 
                <AtomButton 
                    text={locale && section.button.label.translations?.[locale] ? section.button.label.translations[locale] : section.button.label.text}
                    url={locale ? getRelativeLocaleUrl(locale, section.button.url) : section.button.url}
                    newTab={section.button.newTab}
                    style="primary"
                    icon="arrow-diagonal"
                />
        }
    </div>

</section>

<style>
    .section-services-feed {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
        gap: var(--space-2xl);
        padding-inline: var(--page-margin);
        padding-block: var(--space-xl) 20lvh;
        /* min-height: 100lvh; */
        position: relative;
    }

    .section-title {
        display: grid;
        grid-column: 1 / span 2;
        grid-template-columns: 1fr 2fr;
    }

    .section-title,
    .section-content,
    .service-type {
        gap: var(--space-xl);
    }

    .heading,
    .subheading {
        max-width: 20em;
    }

    .section-content {
        display: grid;
        grid-template-columns: var(--grid-template-default);
        gap: var(--space-2xl) 0;
    }

    .section-content :global(.button) {
        max-width: 25rem;
    }

    .service-types {
        display: grid;
        grid-template-columns: subgrid;
        text-align: left;
        grid-column: 1 / span 2;
    }
    
    .service-type__icon {
        width: var(--icon-md);
        height: var(--icon-md);
        margin-left: 0.2em;
        /* height: auto; */
    }

    .service-type__description {
        color: var(--color-foreground-secondary);
        margin-top: 0.5em;
    }

    .service-type__button {
        margin: 0;
        transition: opacity var(--anim-md);
        padding-block: 0 0.4em;
        background-color: transparent;
        text-decoration: none;
    }



    .services {
        position: relative;
    }

    .service-type__groups {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        max-width: 40rem;
        opacity: 0;
        translate: 0 0.5em;
        display: flex;
        flex-direction: column;
        gap: var(--space-xl);
        transition: opacity var(--anim-sm), translate var(--anim-sm);
        pointer-events: none;
        padding-block: 0 var(--space-lg);
    }

    .service-type__group {
        display: flex;
        align-items: flex-start;
        gap: var(--space-2xs);
    }

    .service-type__group-title {
        flex: 0 0 100%;
        text-decoration: none;
    }

    .service-type__services {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: flex-start;
        gap: var(--space-2xs);
    }


    @media screen and ( width > 768px) {


        .service-type {
            display: grid;
            grid-template-columns: subgrid;
            grid-column: 1 / span 2;
            /* z-index: 3; */
        }

        .service-type__button:hover + .services .service-type__groups,
        .service-type__groups:hover {
            translate: 0 0;
            opacity: 1;
            z-index: 3;
        }

        .service-type__button:hover + .services > .service-type__groups,
        .service-type__groups:hover {
            pointer-events: all;
        }

        .service-type:has(.service-type__button:hover, .service-type__groups:hover) + .section-media > .service-image {
            clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
        }

        /* Default visible images */
        .service-types:not(:has(.service-type__button:hover, .service-type__groups:hover)) :is(
            .section-media:nth-of-type(8n + 2) > .service-image:nth-child(3n + 2),
            .section-media:nth-of-type(8n + 4) > .service-image:nth-child(3n + 2),
            .section-media:nth-of-type(8n + 6) > .service-image:nth-child(3n + 3)) {
            /* opacity: 1; */
            clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
        }

        /* Style unhovered service titles */
        .service-types:has(.service-type__button:hover, .service-type__groups:hover) .service-type:not(:has(:hover, .service-type__groups:hover)) .service-type__button {
            opacity: 0.5;
        }

        .service-type__description,
        .service-type__icon {
            display: none;
        }

        .section-media {
            display: grid;
            grid-template-columns: 2fr 1fr 1.5fr 1fr 1fr 1fr;
            grid-template-rows: repeat(3, 1fr);
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            max-width: 100%;
            min-height: 0;
            aspect-ratio: 16 / 9;
            justify-items: flex-end;
            justify-items: stretch;
            align-items: stretch;
            z-index: -1;
            pointer-events: none;
        }

        .service-image {
            width: 100%;
            height: 100%;
            min-width: 0;
            min-height: 0;
            object-fit: cover;
            pointer-events: none;
            /* opacity: 0; */
            clip-path: polygon(100% 0%, 100% 0%, 100% 100%, 100% 100%);
            transition: opacity var(--anim-md), clip-path var(--anim-md);
            transition-delay: 0.15s;
        }

        /* First Service */
        .section-media:nth-of-type(8n + 2) .service-image:nth-child(3n + 1) {
            grid-column: 6 / span 1;
            grid-row: 2 / span 1;
        }

        .section-media:nth-of-type(8n + 2) .service-image:nth-child(3n + 2) {
            grid-column: 5 / span 1;
            grid-row: 1 / span 1;
        }

        .section-media:nth-of-type(8n + 2) .service-image:nth-child(3n + 3) {
            grid-column: 4 / span 2;
            grid-row: 3 / span 1;
        }

        /* Second Service */
        .section-media:nth-of-type(8n + 4) .service-image:nth-child(3n + 1) {
            grid-column: 6 / span 1;
            grid-row: 1 / span 1;
        }

        .section-media:nth-of-type(8n + 4) .service-image:nth-child(3n + 2) {
            grid-column: 4 / span 1;
            grid-row: 2 / span 1;
        }

        .section-media:nth-of-type(8n + 4) .service-image:nth-child(3n + 3) {
            grid-column: 5 / span 2;
            grid-row: 3 / span 1;
        }

        /* Third Service */
        .section-media:nth-of-type(8n + 6) .service-image:nth-child(3n + 1) {
            grid-column: 4 / span 1;
            grid-row: 1 / span 1;
        }

        .section-media:nth-of-type(8n + 6) .service-image:nth-child(3n + 2) {
            grid-column: 6 / span 1;
            grid-row: 2 / span 1;
        }

        .section-media:nth-of-type(8n + 6) .service-image:nth-child(3n + 3) {
            grid-column: 5 / span 1;
            grid-row: 3 / span 1;
        }

        /* Fourth Service */
        .section-media:nth-of-type(8n + 8) .service-image:nth-child(3n + 1) {
            grid-column: 5 / span 1;
            grid-row: 1 / span 1;
        }

        .section-media:nth-of-type(8n + 8) .service-image:nth-child(3n + 2) {
            grid-column: 6 / span 1;
            grid-row: 3 / span 1;
        }

        .section-media:nth-of-type(8n + 8) .service-image:nth-child(3n + 3) {
            grid-column: 4 / span 1;
            grid-row: 2 / span 1;
        }
    }

    @media screen and ( width <= 768px) {

        .section-title {
            display: flex;
            flex-direction: column;
            gap: var(--space-xs);
        }

        .heading,
        .subheading {
            max-width: 30em;
        }

        .section-media {
            display: none;
            grid-column: 2 / span 1;
        }

        .service-image {
            aspect-ratio: 3 / 3;
        }

        .service-image:not(:first-child) {
            display: none;
        }

        .section-content {
            display: flex;
            flex-direction: column;
            align-items: stretch;
        }

        .service-type__groups {
            position: relative;
            opacity: 1;
            translate: 0 0;
            pointer-events: all;
            display: none;
        }

        .service-types {
            display: flex;
            /* display: grid;
            grid-template-columns: 1fr 1fr; */
            /* grid-template-columns: 4fr 1fr; */
            flex-direction: row;
            flex-wrap: wrap;
            gap: var(--space-md);
            max-width: 100%;
            align-self: stretch;
        }

        .service-type {
            display: flex;
            flex-direction: column;
            gap: var(--space-3xs);
            flex: 1 1 calc(50% - var(--space-md));
            /* grid-column: 1 / span 1; */
            max-width: 30rem;
            min-width: 20rem;
        }

        .service-type__description {
            max-width: 36em;
        }

        .service-type__button {
            padding: 0;
            display: flex;
            flex-direction: row;
            align-items: flex-start;
            gap: var(--space-2xs);
        }

        .service-type__services {
            /* flex-wrap: nowrap; */
            /* align-items: flex-start;
            gap: var(--space-2xs); */
        }
    }
</style>