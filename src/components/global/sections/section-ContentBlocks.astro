---
import AtomSanityMedia from "../atoms/atom-sanityMedia.astro"

const { section, brand, key } = Astro.props 
---
<section class="section-content-blocks">
    <div class="content-blocks" >
        {section.contentBlocks.map((contentBlock, i) => (
            <div 
                class="content-block" 
                data-inset={contentBlock.insetMedia ? "true" : "false"}
                data-fullwidth={section.contentBlocks.length > 1 ? "false" : "true"}
            >
                <div 
                    class="block-media" 
                    data-animate-viewport="true" 
                    data-animation="zoom"
                    data-animate-delay={i * 200}
                >
                    <AtomSanityMedia
                        video={contentBlock.media.video}
                        image={contentBlock.media.image}
                        preserveAspect={contentBlock.insetMedia ? true : false}
                        cover={contentBlock.insetMedia ? false : true}
                        contain={contentBlock.insetMedia ? true : false}
                        // aspectRatio={!contentBlock.insetMedia ? 3/4 : null}
                        aspectRatio={section.contentBlocks.length > 1 ? 3/4 : null}
                        sizes="100vw"
                    />
                </div>
            </div>
        ))}
    </div>
</section>

<script>
    // console.log(gsap)
    // import { addParallax } from "../utils/gsap"
    // import { gsap, zoomIn } from "../utils/gsap"
    // const instances = document.querySelectorAll('.section-content-blocks')


    // instances.forEach((instance) => {
    //     const media = instance.querySelectorAll('.block-media')
    //     const timeline = gsap.timeline({ defaults: { ease: "cubic", duration: 5} })
    //     media.forEach((image, i) => { 
    //         zoomIn(image, timeline, i * 0.2)
    //     })
    // })

    // const section = document.getElementById(`content-blocks_${key}`)
    


    


    // console.log(media)
</script>

<style>
    .section-content-blocks {
        padding-inline: var(--page-margin);
        padding-block: var(--space-lg);
    }

    .content-blocks {
        display: flex;
        flex-direction: row;
        justify-content: stretch;
        align-items: stretch;
        gap: var(--space-sm);
        overflow: clip;
    }

    .content-block {
        position: relative;
        overflow: clip;
        flex: 0 1 100%;
        /* max-height: 100svh; */
        background-color: var(--color-accent-shade, var(--color-background-secondary));
        display: flex;
        justify-content: center;
        align-items: center;
        /* min-height: 80svh; */
    }

    .content-block[data-fullwidth="false"] {
        aspect-ratio: 3 / 4;
    }

    .content-block[data-inset="false"] .block-media {
        display: flex;
        justify-content: center;
        align-items: center;
        position: absolute;
        inset: 0;
    }

    .content-block[data-inset="true"] .block-media {
        padding: var(--space-3xl);
        border-radius: var(--radius-sm);
        overflow: hidden;
    }

    @media screen and (max-width: 768px) {
        .content-blocks {
            flex-direction: column;
            justify-content: flex-start;
            align-items: stretch;
        }

        .content-block {
            flex: 0 0 auto;
            max-height: unset;
        }
    }
</style>