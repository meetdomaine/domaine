---
import AtomButton from "../atoms/atom-button.astro"

const { section, brand, key, locale } = Astro.props
---
<section class="section-text-clients">
    <div 
        class="section-title"
        data-animate-viewport="true"
        data-animation="fade-up"
    >
        {section.eyebrow && <p class="eyebrow utility">{locale && section.eyebrow.translations?.[locale] ? section.eyebrow.translations[locale] : section.eyebrow.text}</p>}
        {section.heading && <h2 class="heading h3">{locale && section.heading.translations?.[locale] ? section.heading.translations[locale] : section.heading.text}</h2>}
    </div>
    <!-- <div class="client-logos"> -->
        <div 
            class="logo-track"
            style={`--logo-count: ${section.clients.length};`}
        >
            {section.clients.map((client, i) => (
                <div class="logo" style={`--width-offset: ${client.logoScale};`}>
                    <img src={client.logo} alt={client.name} />
                </div>
            ))}
            {section.clients.map((client, i) => (
                <div class="logo" style={`--width-offset: ${client.logoScale};`}>
                    <img src={client.logo} alt={client.name} />
                </div>
            ))}
        </div>
    <!-- </div> -->
    <div class="section-content">
        {section.quote && section.quoteAuthor &&
            <div class="client-quote">
                <div class="quote-text">    
                    <p class="quote h6">{locale && section.quote.translations?.[locale] ? section.quote.translations[locale] : section.quote.text}</p>
                    <p class="author">{locale && section.quoteAuthor.translations?.[locale] ? section.quoteAuthor.translations[locale] : section.quoteAuthor.text}</p>
                </div>
                {section.quoteClient.logo && 
                    <div 
                        class="quote-logo"
                        style={`--logo-scale: ${section.quoteClient?.logoScale}`}
                    >
                        <img src={section.quoteClient.logo} alt={section.quoteClient.title} />
                    </div>
                }
            </div>
        }

        {section.subheading &&
            <div class="section-text">
                <p>{locale && section.subheading.translations?.[locale] ? section.subheading.translations[locale] : section.subheading.text}</p>
                {section.button.text && section.button.url && 
                    <AtomButton 
                        text={section.button.text}
                        url={section.button.url}
                        icon="arrow-diagonal"
                    />
                }
            </div>
        }
    </div>
</section>

<style>
    .section-text-clients {
        padding-inline: var(--page-margin);
        padding-block: var(--space-4xl);
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        gap: var(--space-2xl);
        /* align-items: center; */
        /* min-height: 60svh; */
        overflow: hidden;
    }

    .section-title {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        gap: var(--space-sm);
        max-width: 50em;
    }

    .eyebrow {
        color: var(--color-accent);
    }

    .logo-track {
        width: max-content;
        gap: var(--space-4xl);
        animation: client-scroll calc( var(--logo-count) * 4s) linear infinite;
        will-change: translate;
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    @keyframes client-scroll {
        from {
            translate: 0 0;
        }
        to {
            translate: calc(-50% - var(--page-margin) * 2) 0;
        }
    }

    .logo {
        /* flex: 0 0 calc(16rem * (var(--width-offset) / 100)); */
        width: calc(16rem * (var(--width-offset) / 100));
        height: auto;
    }

    .logo :global(svg) {
        width: 100%;
        height: auto;
    }

    .section-content {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .section-text {
        display: flex;
        flex-direction: column;
        gap: var(--space-xs);
        align-items: flex-start;
        flex: 0 0 30em;
        gap: var(--space-md);
    }

    .client-quote {
        display: flex;
        flex-direction: column;
        border-inline-start: 1px solid var(--color-accent);
        padding-inline-start: var(--space-xl);
        padding-block: var(--space-sm);
        gap: var(--space-md);
        max-width: 34rem;
    }

    .quote-text {
        display: flex;
        flex-direction: column;
        gap: var(--space-2xs);
        /* hanging-punctuation: first; */
    }


    .quote {
        margin: 0;
    }

    .author {
        /* margin-bottom: 0.5em; */
        color: var(--color-foreground-secondary);
        margin: 0;
    }

    .quote-logo {
        /* max-width: 5rem; */
        /* width: calc(1rem * var(--logo-scale)); */
    }

    .quote-logo :global(svg) {
        width: max(calc(var(--logo-scale) * 0.4%), 10rem);
    }

    @media screen and (width < 768px) {

        .section-text-clients {
            min-height: unset;
        }

        .section-content {
            flex-direction: column;
            justify-content: flex-start;
            gap: var(--space-xl);
        }

        .section-text {
            max-width: 30rem;
            flex: 0 0 auto;
        }
    }
</style>