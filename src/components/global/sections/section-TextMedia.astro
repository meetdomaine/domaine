---
import { Icon } from "astro-icon/components"
import AtomButton from "../atoms/atom-button.astro"
import SanityMedia from "../atoms/atom-sanityMedia.astro"
import { replaceStringIcons } from "../../../lib/inline-icon-text"
import { getLocaleUrl, getTranslationString } from "../../../lib/translations"

const { section, brand, locale } = Astro.props

const iconText = replaceStringIcons(getTranslationString(section.heading, locale))
---
<section class="section-text-media" data-layout={section.layout} data-color-scheme={section.colorScheme ? section.colorScheme : "brand-02"}>

    <div class="section-content">
        <div 
            class="section-text"
            data-animate-viewport="true"
            data-animation="fade-up"
        >
            {section.eyebrow && <p class="eyebrow utility">{getTranslationString(section.eyebrow, locale)}</p>}
            <h2 class="heading h2"><Fragment set:html={iconText} /></h2>
            {section.subheading && <p class={`text ${section.largeText ? "h4" : ""}`}>{getTranslationString(section.subheading, locale)}</p>}
            {section.button?.label && section.button?.url &&
                <AtomButton 
                    text={getTranslationString(section.button.label, locale)}
                    url={getLocaleUrl(section.button.url, locale)}
                    newTab={section.button.newTab}
                    style="primary"
                    icon="arrow-diagonal"
                />
            }
        </div>
        {section.bulletPoints &&
            <div class="bullets">
                {section.bulletPoints.map((bulletPoint) => (
                    <p class="bullet-point h6"><Fragment set:html={replaceStringIcons(getTranslationString(bulletPoint, locale))} /></p>
                ))}
            </div>
        }
    </div>
    {section.media &&
        <div class="section-media">
            <SanityMedia 
                video={section.media.video}
                aspectRatio={3 / 4}
                image={section.media.image}
                sizes="50vw"
                cover={true}
            />
        </div>
    }
</section>

<!-- <script>
    import { addParallax, fadeUp, gsap } from "../../../lib/gsap"

    const animateSection = () => {
        const sections = document.querySelectorAll('.section-text-media')
        sections.forEach((section) => {
            const sectionMedia = section.querySelector('.section-media')
            const video = sectionMedia.querySelector('mux-player')
            const image = sectionMedia.querySelector('img')
            // if (video) addParallax(video)
            // if (image) addParallax(image)
        })
    }

    window.addEventListener("preload:complete", () => {
        animateSection()
    })
</script> -->

<style>
    .section-text-media {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: stretch;
        /* padding-inline: var(--page-margin); */
        /* padding-block: var(--space-lg); */
        gap: var(--space-xl);
        background-color: var(--color-background);
    }

    .section-text-media[data-layout="mediaLeft"] {
        flex-direction: row-reverse;
    }

    .section-content {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        padding-block: var(--space-2xl);
        padding-inline: var(--page-margin);
        flex: 0 1 50%;
        max-width: 45em;
        gap: var(--space-3xl);
    }

    .section-text {
        display: flex;
        flex-direction: column;
        gap: var(--space-xs);
    }

    .heading .inline-icon {
        width: 1em;
        height: 1em;
    }

    .text {
        margin-bottom: 1em;
        color: var(--color-foreground-secondary);
    }

    .bullets {
        display: flex;
        flex-direction: column;
        gap: var(--space-md);
    }

    .bullet-point {
        text-wrap: auto;
    }
    
    .bullet-point :global(svg) {
        /* margin-right: 0.2em; */
    }

    .section-media {
        flex: 0 0 50%;
        border-radius: var(--radius-sm);
        overflow: hidden;
        height: auto;
        /* aspect-ratio: 3 / 4; */
    }


    .section-text {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    @media screen and (max-width: 768px) {
        .section-text-media {
            flex-direction: column;
            justify-content: flex-start;
            flex: 0 0 auto;
            width: 100%;
        }


        .section-text-media[data-layout="mediaLeft"] {
            flex-direction: column-reverse;
        }

        .section-content {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            justify-content: flex-start;
            flex: 0 0 auto;
            gap: var(--space-lg);
            width: 100%;
            max-width: unset;
        }
    }

</style>