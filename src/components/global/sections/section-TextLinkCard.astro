---
import AtomTag from "../atoms/atom-tag.astro"
import AtomSanityImage from "../atoms/atom-sanityImage.astro"
import { getRelativeLocaleUrl } from "astro:i18n"

const { section, locale } = Astro.props

---
<section class="section-text-feed">
    <div class="section-content">
        <h1 class="heading h2" data-animate-viewport="true" data-animation="fade-up">
            {locale && section.heading.translations[locale] ? section.heading.translations[locale] : section.heading.text}
        </h1>
        {section.subheading && <p class="text caption">{locale && section.subheading.translations[locale] ? section.subheading.translations[locale] : section.subheading.text}</p>}
        {section.stats &&
            <div class="tags">
                {section.stats.map((stat, i) => (
                    <div 
                        class="tag-wrapper"
                        data-animate-viewport="true"
                        data-animation="fade"
                        data-animation-delay={150 * i}
                    >
                        <AtomTag 
                            title={locale && stat.number.translations?.[locale] ? stat.number.translations[locale] : stat.number.text}
                            text={locale && stat.label.translations?.[locale] ? stat.label.translations[locale] : stat.label.text}
                        />
                    </div>
                ))}
            </div>
        }
    </div>

    {section.linkCardHeading && section.linkCardURL &&
        <a 
            class="link-card" 
            style={`
              background-color: ${section.linkCardColor?.hex};
              --image-width: ${section.imageWidth};
            `} 
            data-color-scheme={section.linkCardTextColor === "light" ? "invert" : "default"}
            href={locale ? getRelativeLocaleUrl(locale, section.linkCardURL): section.linkCardURL}
            data-animate-viewport="true" 
            data-animation="fade"
            data-jumplink={section.linkCardIsJumplink ? `${section.linkCardURL}` : "false"}
            data-orientation={section.orientation}
        >
            {section.linkCardImage && 
                <AtomSanityImage 
                    sizes="40vw"
                    image={section.linkCardImage.image}
                />
            }
            <p class="link-card-text">{locale && section.linkCardHeading.translations?.[locale] ? section.linkCardHeading.translations[locale] : section.linkCardHeading.text}</p>
        </a>
    }
</section>

<style>
    .section-text-feed {
        display: flex;
        flex-direction: row;
        align-items: flex-start;
        justify-content: space-between;
        padding-inline: var(--page-margin);
        padding-block: var(--space-2xl);
        gap: var(--space-lg);
    }

    .section-content {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: var(--space-xs);
    }

    .heading {
        max-width: 14em;
    }

    .tags {
        display: flex;
        flex-direction: row;
        gap: var(--space-2xs);
        flex-wrap: wrap;
    }

    .text {
        max-width: 46em;
        margin-block-end: 1em;
    }

    .link-card {
        flex: 0 1 25rem;
        display: flex;
        flex-direction: row;
        /* justify-content: center; */
        align-items: center;
        /* text-align: center; */
        gap: var(--space-sm);
        padding: var(--space-sm) var(--space-md);
        border-radius: var(--radius-sm);
        text-decoration: none;
    }

    .link-card[data-orientation="vertical"] {
      flex-direction: column;
      align-items: flex-start;
    }

    .link-card[data-orientation="vertical"] :global(img) {
      flex: 0 0 auto;
      max-width: calc(var(--image-width) * 1%);
    }

    .link-card :global(img) {
        flex: 0 0 calc(var(--image-width) * 1%);
        height: auto;
        min-width: 0;
    }

    .link-card-text {
        margin: 0;
    }

    @media screen and (max-width: 768px) {
        .section-text-feed {
            flex-direction: column;
            align-items: flex-start;
            gap: var(--space-4xl);
        }

        .tags {
            /* flex-direction: column;
            align-items: flex-start; */
        }

        .link-card {
            flex: 0 0 auto;
            max-width: 30rem;
        }

    }
</style>