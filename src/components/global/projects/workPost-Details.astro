---
import { Translations } from "../../../lib/locales"
import { getLocaleUrl, getTranslationString } from "../../../lib/translations"
import AtomButton from "../atoms/atom-button.astro"
import AtomSanityImage from "../atoms/atom-sanityImage.astro"
import AtomTag from "../atoms/atom-tag.astro"
import { getRawSvg } from "../utils/raw-svg"

const { url, client, services, partners, features, metrics, theme, agencyBrand, locale } = Astro.props
const logo = getRawSvg(client.logo)
---
<section class="work-post_details">

    <div class="section-content">
    
        {client && 
            <div class="client">
                <div class="client-logo" style={`--logo-scale: ${client.logoScale}`}>
                    <Fragment set:html={logo} />
                </div>
                {client.description && 
                    <div class="client-info">
                        <p class="client-description h6">{getTranslationString(client.description, locale)}</p>
                        {url &&
                            <AtomButton 
                                text={locale ? Translations["VIEW-LIVE-SITE"].locales[locale] : Translations["VIEW-LIVE-SITE"].name}
                                url={url}
                                icon="arrow-diagonal"
                                style="tertiary"
                                newTab={true}
                            />
                        }
                    </div>
                }
            </div>
        }

        {services && 
            <div class="services">
                <h4 class="h5">{locale ? Translations.SERVICES.locales[locale] : Translations.SERVICES.name}</h4>
                <div class="tags">
                    {services.map((service) => (
                        <AtomTag 
                            text={getTranslationString(service.title, locale)}
                            url={getLocaleUrl(`${agencyBrand === "studio" ? "/studio" : ""}/work/services/${service.slug.current}`, locale)}
                            theme={theme === "light" ? "glass-dark" : "glass-light"}
                        />
                    ))}
                </div>
            </div>
        }

        {features && 
            <div class="features">
                <h4 class="h5">{locale ? Translations.FEATURES.locales[locale] : Translations.FEATURES.name}</h4>
                <div class="tags">
                    {features.map((feature) => (
                        <AtomTag 
                            text={getTranslationString(feature.title, locale)}
                            url={getLocaleUrl(`${agencyBrand === "studio" ? "/studio" : ""}/work/features/${feature.slug.current}`, locale)}
                            theme={theme === "light" ? "glass-dark" : "glass-light"}
                        />
                    ))}
                </div>
            </div>
        }


        {partners && 
            <div class="partners">
                <h4 class="h5">{locale ? Translations.PARTNERS.locales[locale] : Translations.PARTNERS.name}</h4>
                <div class="partner-tiles">
                    {partners.map((partner) => (
                        <a 
                            class="partner-tile" 
                            href={partner.tier?.createLandingPages ? getLocaleUrl(`/partners/${partner.slug.current}`, locale) : partner.websiteUrl} 
                            target={partner.tier?.createLandingPages ? "_self" : "_blank"}
                        >
                            <AtomSanityImage 
                                sizes="30vw"
                                image={partner.icon.image}
                            />
                            <p class="partner-title caption">{partner.title}</p>
                        </a>
                    ))}
                </div>
            </div>
        }

    </div>
    <!-- {awards && 
        <div class="awards">
            <h4>Awards</h4>
            {awards.map((award) => (
                <div class="award">
                    <p>{award.awardTitle} | {award.publication}</p>
                </div>
            ))}
        </div>
    }
    } -->
</section>


<style>
    .work-post_details {
        padding-inline: var(--page-margin);
        padding-block: var(--space-3xl);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 60svh;
        background-color: var(--color-background-secondary);
    }

    .section-content {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        gap: var(--space-2xl);
        max-width: 60em;
    }

    .client,
    .services,
    .features,
    .partners {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: flex-start;
        gap: var(--space-lg);
    }

    .client {
        margin-bottom: var(--space-2xl);
    }

    .client-logo {
        flex-grow: 1;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
    }

    .client-logo :global(svg) {
        flex: 0 0 calc( (var(--logo-scale) / 100) * 100%);
        height: auto;
    }

    .client-info {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: var(--space-md);
        flex-basis: 70%;
    }

    .client-description {
        max-width: 40em;
    }

    .tags,
    .partner-tiles {
        display: flex;
        flex-direction: row;
        gap: var(--space-2xs);
        flex-wrap: wrap;
        flex-basis: 70%;
    }

    .partner-tiles {
        display: grid;
        gap: var(--space-md) var(--space-xs);
        grid-template-columns: repeat(6, 1fr);
    }

    .partner-tile {
        border-radius: var(--radius-sm);
        overflow: hidden;
        text-decoration: none;
        display: flex;
        flex-direction: column;
        gap: var(--space-3xs);
    }

    @media screen and (width <= 768px) {
        .client,
        .services,
        .features,
        .partners {
            flex-direction: column;
            align-items: stretch;
        }
        

        .client-logo :global(svg) {
            width: calc( (var(--logo-scale) / 100) * 60%);
            flex: 0 0 auto;
            height: auto;
        }
    }

</style>