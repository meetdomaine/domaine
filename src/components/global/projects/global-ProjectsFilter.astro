---
import { Icon } from 'astro-icon/components';
import AtomTag from '../atoms/atom-tag.astro';
import { partnerTileFields, projectFeatureQuery, serviceGroupQuery } from '../../../lib/cms-queries';
import { getLocaleUrl } from '../../../lib/translations';
import { getTranslationString } from '../../../lib/translations';
import { Translations } from '../../../lib/locales';
import { sanityClient } from "sanity:client"
import { getProjectIndustries, getPartners, getProjectFeatures, getServiceGroups } from '../../../lib/cached-content';

const { brand, currentPath, locale } = Astro.props;

const [allFeatures, allIndustries, allPartners, allServiceGroups] = await Promise.all([
    getProjectFeatures(brand),
    getProjectIndustries(brand),
    getPartners(brand),
    getServiceGroups(brand)
])

const brandFeatures = allFeatures.filter((feature) => feature.hasContent[brand])
const brandIndustries = allIndustries.filter((industry) => industry.hasContent[brand])
const brandPartners = allPartners.filter((partner) => partner.hasContent[brand])
const brandServiceGroups = allServiceGroups.filter((serviceGroup) => serviceGroup.hasContent[brand])

const allFilters = await Promise.all([
    {
        title: locale ? Translations.INDUSTRIES.locales[locale] : Translations.INDUSTRIES.name,
        path: 'industries/',
        filters:  brandIndustries
    },
    {
        title: locale ? Translations.FEATURES.locales[locale] : Translations.FEATURES.name,
        path: 'features/',
        filters: brandFeatures
    },
    {
        title: locale ? Translations.PARTNERS.locales[locale] : Translations.PARTNERS.name,
        path: 'partners/',
        filters: brandPartners
    },
    {
        title: locale ? Translations.SERVICES.locales[locale] : Translations.SERVICES.name,
        path: 'service-groups/',
        filters: brandServiceGroups
    },
])



---
<dialog popover id="projects-filter" class="projects-filter" data-lenis-prevent>
    <div class="section-title">
        <h2 class="h5">{locale ? Translations['FILTER-PROJECTS'].locales[locale] : Translations['FILTER-PROJECTS'].name}</h2>
        <button class="close-button button-reset" popovertarget="projects-filter">
            <Icon class="close-icon" name="icon-x" />
        </button>
    </div>
    <div class="section-content">
        {allFilters.map((filterGroup) => (
            <div class="filter-type">
                <p class="filter-title h6">{filterGroup.title}</p>
                <div class="filters">
                    {filterGroup.filters.slice(0, 20).map((filter) => {
                        return (
                            <AtomTag 
                                text={getTranslationString(filter.title, locale)}
                                url={getLocaleUrl(`/${brand === "Studio" ? "studio/" : ""}work/${filterGroup.path}${filter.slug.current}`, locale)}
                                theme={currentPath == `/${filterGroup.path}${filter.slug.current}` ? "dark" : "light"}
                            />
                        )
                    })}
                </div>
            </div>
        ))}
    </div>
</dialog>

<style>

    .projects-filter {
        opacity: 0;
        translate: 0 5rem;
        /* display: none; */
        /* display: flex; */
        flex-direction: column;
        gap: var(--space-xl);
        max-height: calc(100dvh - var(--space-md) * 2);
        overflow-y: auto;
        border: none;
        outline: none;
        /* overflow: hidden; */
        width: min(60em, calc(100% - var(--page-margin) * 2));
        border-radius: var(--radius-sm);
        margin-right: var(--page-margin);
        margin-top: var(--space-sm);
        justify-self: flex-end;
        left: unset;
        transition: none;
        transition: 
            overlay var(--anim-sm) allow-discrete,
            display var(--anim-sm) allow-discrete; 
    }

    .projects-filter:popover-open {
        translate: 0 0;
        opacity: 1;
        display: flex;
        transition: 
            translate var(--anim-sm), 
            opacity var(--anim-sm), 
            overlay var(--anim-sm) allow-discrete,
            display var(--anim-sm) allow-discrete; 
    }

    .projects-filter::backdrop {
        opacity: 0;
        background-color: var(--background-blur-color);
        backdrop-filter: var(--background-blur);
        -webkit-backdrop-filter: var(--background-blur);
        pointer-events: all;
        transition: 
            opacity var(--anim-sm), 
            overlay var(--anim-sm) allow-discrete,
            display var(--anim-sm) allow-discrete; 
    }

    .projects-filter:popover-open::backdrop {
        opacity: 1;
    }

    @starting-style {
        .projects-filter:popover-open {
            opacity: 0;
            display: flex;
            gap: var(--space-3xl);
            translate: 0 5rem;
        }

        .projects-filter:popover-open::backdrop {
            opacity: 0;
        }
    }


    .section-title {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
        position: sticky;
        top: 0;
        background-color: var(--color-background);
        padding-block: var(--space-md);
    }

    .section-title,
    .section-content {
        padding-inline: var(--page-margin);
    }

    .close-icon  {
        width: var(--icon-md);
        height: var(--icon-md);
    }

    .section-content {
        display: flex;
        flex-direction: column;
        gap: var(--space-xl);
        padding-block: 0 var(--space-md);
    }

    .filter-type {
        border-bottom: 1px solid var(--color-border);
        display: flex;
        flex-direction: row;
        gap: var(--space-lg);
        flex-wrap: wrap;
    }

    .filter-type:last-child {
        border-bottom: 1px solid transparent;
    }

    .filter-title {
        flex: 0 0 20%;
    }

    .filters {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        margin-bottom: var(--space-xl);
        gap: var(--space-2xs);
        flex: 1 0 min(30rem, 100%);
    }

</style>