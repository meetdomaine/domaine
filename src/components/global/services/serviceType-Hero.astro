---
import AtomSanityImage from "../atoms/atom-sanityImage.astro"
const { serviceType, brand } = Astro.props
---
<section class="service-type-hero" data-color-scheme="brand-02">
     <div class="section-title">
         <p class="service-excerpt h5">{serviceType.excerpt}</p>
         <h1 class="service-title title-xl">{serviceType.title}</h1>
    </div>
    <div class="section-content">
        <p class="service-eyebrow utility">Our {serviceType.title} Practice</p>
        <p class="service-description h4">{serviceType.description}</p>
    </div>
    {serviceType.images.map((image) => (
        <div class="service-image">
            <AtomSanityImage 
                sizes="30vw"
                image={image.image}
            />
        </div>
    ))}
</section>

<script>
    import { isMobileBreakpoint } from "../utils/check-device"
    import { throttle } from "../utils/functions"
    import { gsap } from "../utils/gsap"

    // if (isMobileBreakpoint) return

    const sections = document.querySelectorAll('.service-type-hero')

    sections.forEach((section) => {

        const _delay = 50

        let timeout = null
        let isPlaying = false
        let imageIndex = 0
        let mouseX = 0
        let mouseY = 0

        let boundingBox = section.getBoundingClientRect()

        window.addEventListener("DOMContentLoaded", () => {

            const images: Array<HTMLElement> = Array.from(section.querySelectorAll('.service-image'))

            const animateImages = () => {
                const currentImage = images[imageIndex]
                currentImage.dataset.active = "true"
                currentImage.style.left = `${mouseX}px`
                currentImage.style.top = `${mouseY}px`

                if (imageIndex < images.length - 1) {
                    imageIndex++
                } else {
                    imageIndex = 0
                }

                setTimeout(() => {
                    currentImage.dataset.active = "false"
                    isPlaying = false
                }, _delay)
            }

            const initAnimation = () => {
                section.addEventListener("mousemove", (e: MouseEvent) => {
                    mouseX = e.clientX
                    mouseY = e.clientY - boundingBox.top
                    if (isPlaying) return
                    isPlaying = true
                    timeout = setTimeout(animateImages, _delay)
                })

                window.addEventListener("scroll", () => {
                    boundingBox = section.getBoundingClientRect()
                })
            }
            
            
            if (!isMobileBreakpoint) {
                initAnimation()
            }

            window.addEventListener("resize", () => {
                if (!isMobileBreakpoint) {
                    boundingBox = section.getBoundingClientRect()
                    initAnimation()
                }
            })
        })

    })
</script>

<style>
    .service-type-hero {
        padding-inline: var(--page-margin);
        padding-block: calc(var(--header-height) * 1) var(--space-4xl);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: var(--space-xl);
        position: relative;
        overflow: hidden;
    }

    .section-title,
    .section-content {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
    }

    .section-title {
        gap: var(--space-xl);
        min-height: 80svh;
    }

    .service-title,
    .service-excerpt {
        z-index: 2;
        /* font-size: 16vw; */
    }

    .section-content {
        gap: var(--space-md);
    }

    .service-excerpt,
    .service-description {
        text-align: center;
        max-width: 26em;
    }

    /* .section-media {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100lvh;
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        align-items: center;
        z-index: 0;
    } */

    .service-image {
        position: absolute;
        /* top: 50%;
        left: 50%; */
        top: 0;
        left: 0;
        translate: -50% calc(-50% + 5rem);
        border-radius: var(--radius-sm);
        overflow: hidden;
        width: 20vw;
        opacity: 0;
        z-index: 2;
        /* translate: 0 10rem; */
        transition: opacity var(--anim-lg) 0.2s, scale var(--anim-lg), translate var(--anim-lg);
        scale: 0.9;
    }

    .service-image[data-active="true"] {
        opacity: 1;
        scale: 1;
        translate: -50% -50%;
        transition: none;
    }
</style>