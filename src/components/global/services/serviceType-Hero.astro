---
import { Brands } from "../../../enums/brands"
import { getTranslationString } from "../../../lib/translations"
import AtomSanityImage from "../atoms/atom-sanityImage.astro"

const { serviceType, brand, locale } = Astro.props
console.log(serviceType)
---
<section class="service-type-hero" data-color-scheme="brand-02">
     <div class="section-title">
         <div class="service-images-mobile">
            <div class="service-images-track">
                {serviceType.images.map((image) => (
                    <div class="service-image-mobile">
                        <AtomSanityImage 
                            sizes="30vw"
                            image={image.image}
                            aspectRatio={3 / 4}
                            // cover={true}
                        />
                    </div>
                ))}
                {serviceType.images.map((image) => (
                    <div class="service-image-mobile">
                        <AtomSanityImage 
                            sizes="30vw"
                            image={image.image}
                            aspectRatio={3 / 4}
                            // cover={true}
                        />
                    </div>
                ))}
            </div>
         </div>
         <p class="service-excerpt h5">{getTranslationString(brand === Brands.STUDIO && serviceType.excerptStudio ? serviceType.excerptStudio : serviceType.excerpt, locale)}</p>
         <h1 class="service-title title-xl">{getTranslationString(serviceType.title, locale)}</h1>
    </div>
    <div class="section-content">
        <p class="service-eyebrow utility">Our {getTranslationString(serviceType.title, locale)} Practice</p>
        <p class="service-description h4">{getTranslationString(brand === Brands.STUDIO && serviceType.descriptionStudio ? serviceType.descriptionStudio : serviceType.description, locale)}</p>
    </div>
    {serviceType.images.map((image) => (
        <div class="service-image">
            <AtomSanityImage 
                sizes="30vw"
                image={image.image}
            />
        </div>
    ))}
    {serviceType.images.map((image) => (
        <div class="service-image">
            <AtomSanityImage 
                sizes="30vw"
                image={image.image}
            />
        </div>
    ))}
</section>

<script>
    import { getIsMobile, isMobileBreakpoint } from "../../../lib/check-device"

    document.addEventListener("DOMContentLoaded", () => {

        const sections = document.querySelectorAll('.service-type-hero')
        sections.forEach((section) => {

            const _delay = 100

            let timeout = null
            let isPlaying = false
            let imageIndex = 0
            let mouseX = 0
            let mouseY = 0

            let boundingBox = section.getBoundingClientRect()
            let mouseListener = null
            let scrollListener = null

            const images: Array<HTMLElement> = Array.from(section.querySelectorAll('.service-image'))

            const animateImages = (e) => {

                console.log("ANIMATE IMAGES")

                const render = () => {
                    
                    const currentImage = images[imageIndex]
                    currentImage.dataset.active = "true"
                    currentImage.style.left = `${mouseX}px`
                    currentImage.style.top = `${mouseY}px`

                    if (imageIndex < images.length - 1) {
                        imageIndex++
                    } else {
                        imageIndex = 0
                    }

                    setTimeout(() => {
                        currentImage.dataset.active = "false"
                        isPlaying = false
                    }, _delay)
                }

                mouseX = e.clientX
                mouseY = e.clientY - boundingBox.top
                if (isPlaying) return
                isPlaying = true
                timeout = setTimeout(render, _delay)
            }

            const updateBoundingRect = () => {
                boundingBox = section.getBoundingClientRect()
            }

            const initAnimation = () => {
                
                if (mouseListener === null) {
                    mouseListener = section.addEventListener("mousemove", animateImages) 
                }

                if (scrollListener === null) {
                    scrollListener = window.addEventListener("scroll", updateBoundingRect)
                }
            }

            const destroyAnimation = () => {
                if (mouseListener !== null) {
                    section.removeEventListener("mousemove", animateImages)
                    mouseListener = null
                }
                if (scrollListener !== null) {
                    window.removeEventListener("scroll", updateBoundingRect)
                    scrollListener = null
                }
                clearTimeout(timeout)
            }
            
            
            if (!getIsMobile()) {
                initAnimation()
            }

            window.addEventListener("resize", () => {
                if (!getIsMobile()) {
                    boundingBox = section.getBoundingClientRect()
                    initAnimation()
                } else {
                    destroyAnimation() 
                }
            })

        })
    })
</script>

<style>
    .service-type-hero {
        padding-inline: var(--page-margin);
        padding-block: calc(var(--header-height) * 1) var(--space-4xl);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: var(--space-xl);
        position: relative;
        overflow: hidden;
    }

    .section-title,
    .section-content {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        max-width: 100%;
    }

    .section-title {
        gap: var(--space-xl);
        min-height: 80svh;
    }

    .service-title,
    .service-excerpt {
        z-index: 2;
        /* font-size: 16vw; */
    }

    .section-content {
        gap: var(--space-md);
    }

    .service-excerpt,
    .service-description {
        text-align: center;
        max-width: 26em;
    }

    .service-image {
        position: absolute;
        /* top: 50%;
        left: 50%; */
        top: 0;
        left: 0;
        translate: -50% -50%;
        /* translate: -50% calc(-50% + 2rem); */
        border-radius: var(--radius-sm);
        overflow: hidden;
        width: 10vw;
        opacity: 0;
        z-index: 2;
        /* translate: 0 10rem; */
        transition: opacity 2s var(--anim-easing) 1s, translate 2s var(--anim-easing);
        /* scale: 0.9; */
    }

    .service-image[data-active="true"] {
        opacity: 1;
        scale: 1;
        translate: -50% -50%;
        /* transition: none; */
        transition: opacity 0.1s var(--anim-easing), translate 0.1s var(--anim-easing);
    }

    @media screen and (width > 768px) {
        .service-images-mobile {
            display: none;
        }
    }

    @media screen and (width <= 768px) {
        /* .service-type-hero {
            overflow: hidden;
        } */

        .section-title {
            flex-direction: column-reverse;
        }

        .service-images-mobile {
            display: flex;
            flex-direction: row;
            justify-content: flex-start;
            overflow: visible;
            /* max-width: 100%; */
            white-space: nowrap;
            width: 100dvw;
            flex: 0 0 30%;
        }

        @keyframes image-ticker {
            0% {
                translate: 0% 0;
            }
            100% {
                translate: calc(-50% - var(--page-margin) / 2) 0;
            }
        }

        .service-images-track {
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: row;
            gap: var(--space-sm);
            min-width: max-content;
            align-items: stretch;
            height: 100%;
            overflow: visible;
            animation: image-ticker 12s linear infinite;
        }

        .service-image-mobile {
            flex: 0 1 100%;
            height: 100%;
            border-radius: var(--radius-sm);
            overflow: hidden;
        }
    }
</style>