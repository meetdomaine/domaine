---
import type { SanityAsset } from '@sanity/image-url/lib/types/types';
import { urlFor } from '../utils/cms-queries';
import { string } from 'astro/zod';

interface Props {
  image: SanityImage,
  sizes: string,
  cover?: boolean,
  contain?: boolean,
  eager?: boolean,
  aspectRatio?: number,
  alt?: string,
  transitionName?: string,
  pagefindMeta?: string,
  preserveAspect?: boolean,
}

const { image, sizes, eager, aspectRatio, cover, contain, alt, pagefindMeta, preserveAspect } = Astro.props;

const srcWidth = image.asset.metadata.dimensions.width;
const srcHeight = image.asset.metadata.dimensions.height;

const crop = image.crop
const cropTop = crop ? crop.top : 0
const cropRight = crop ? crop.right : 0
const cropBottom = crop ? crop.bottom : 0
const cropLeft = crop ? crop.left : 0

const width = srcWidth - (srcWidth * cropLeft) - (srcWidth * cropRight)
const height = srcHeight - (srcHeight * cropTop) - (srcHeight * cropBottom)

const ratio = aspectRatio ? aspectRatio : width / height

const generateSrcSets = () => {
  const sources = []
  for (let i = 1; i <=6; i+= 0.5) {
    if (preserveAspect) {
      sources.push( `${urlFor(image).width(Math.floor(width / i)).auto('format').fit('crop').url()} ${Math.floor(width / i)}w`)
    } else {
      sources.push( `${urlFor(image).width(Math.floor(width / i)).height(Math.floor((width / i) / ratio )).auto('format').fit('crop').url()} ${Math.floor(width / i)}w`)
    }
  }
  return sources.toString()
}
---
<img
  id={image.asset._id}
  class="sanity-image"
  width={width}
  height={height}
  sizes={sizes}
  srcset={generateSrcSets()}
  src={urlFor(image).width(width).height(width / ratio).auto('format').url()}
  decoding={eager ? 'sync' : 'async'}
  loading={eager ? 'eager' : 'lazy'}
  alt={alt ? alt : image.alt}
  data-cover={cover ? "true" : "false"}
  data-contain={contain ? "true" : "false"}
  data-pagefind-meta={pagefindMeta}
/>

<!-- <img
  id={`placeholder-${image.asset._id}`}
  class="placeholder"
  src={image.asset.metadata.lqip}
  alt={alt ? alt : image.alt}
/> -->

<!-- <script define:vars={{ image }}>
  const s = document.querySelectorAll(image.asset._id)
  const placeholders = document.querySelectorAll(`placeholder-${image.asset._id}`)

  if (sanityImages && placeholders) {
    sanityImagesforEach((image) => {
      image.addEventListener("load", () => {
        placeholders.forEach((placeholder) => placeholder.classList.add('hidden'))
      })
    })
  }
</script> -->

<style>
  .sanity-image {
    display: block;
    width: 100%;
    height: auto;
    max-height: 100%;
    margin: 0;
    /* opacity: 0; */
  }

  .sanity-image[data-cover="true"] {
    height: 100%;
    object-fit: cover;
    /* opacity: 0; */
  }

  .sanity-image[data-contain="true"] {
    height: 100%;
    width: 100%;
    object-fit: contain;
    /* opacity: 0; */
  }

  .placeholder {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    transition: opacity var(--anim-sm);
  }

  .placeholder.hidden {
    opacity: 0;
  }

</style>