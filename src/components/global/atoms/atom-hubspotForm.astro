---
interface Props {
    formId: any,
    buttonToggles?: boolean,
}

const { formId, buttonToggles } = Astro.props

const portalId = import.meta.env.HUBSPOT_PORTAL_ID
const accessToken = import.meta.env.HUBSPOT_ACCESS_TOKEN

const hubspotResponse = await fetch(`https://api.hubapi.com/marketing/v3/forms/${formId}`, {
    method: "GET",
    headers: {
        'Authorization': `Bearer ${accessToken}`,
        "Content-type": "application/json; charset=UTF-8"
    }
})

const formData = await hubspotResponse.json()
const fieldGroups = formData.fieldGroups
const consentData = formData.legalConsentOptions

const fields = await fieldGroups.flatMap((group) => {
    return group.fields.map((field) => {
        return field
    })
})
---
<form id={`form-${formId}`} >
    {fieldGroups.map((group) => {
        return (
            <div class="form-field-group">
        
            {group.fields.map((field) => {
                switch (field.fieldType) {
                    case('single_line_text'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <input type="text" name={field.name} id={field.name} placeholder="" required={field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    case('email'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <input type="email" name={field.name} id={field.name} placeholder="" required={field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    case('phone'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <input type="tel" name={field.name} id={field.name} placeholder="" required={field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    case('datepicker'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <input type="date" name={field.name} id={field.name} placeholder="" required={field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    case('number'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <input type="number" name={field.name} id={field.name} placeholder="" required={field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    case('file'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <input type="file" name={field.name} id={field.name} placeholder="" required={field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    case('dropdown'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                {field.description && <p class="field-description caption">{field.description}</p>}
                                <select name={field.name} id={field.name} required={field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId}>
                                    {field.options.map((option) => (
                                        <option value={option.value}>{option.label}</option>
                                    ))}
                                </select>
                            </div>
                        )
                    case('single_checkbox'):
                        return (
                            <div class="form-field">
                                <div class="inputs-list">
                                    <div class="input-list-item">
                                        <input type="checkbox" id={field.name} name={field.name} required={field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                        <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                        {field.description && <p class="field-description caption">{field.description}</p>}
                                    </div>
                                </div>
                            </div>
                        )
                    case('multiple_checkboxes'):
                        return (
                            <div class="form-field">
                                <p class="">{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</p>
                                {field.description && <p class="field-description caption">{field.description}</p>}
                                <fieldset class={`inputs-list ${buttonToggles ? "toggle-button-list" : ""}`}>
                                    {field.options.map((option) => (
                                        <div class={`input-list-item ${buttonToggles ? "toggle-button" : ""}`}>
                                            <input 
                                                type="checkbox" 
                                                id={option.value} 
                                                name={field.name} 
                                                value={option.value} 
                                                required={field.required} 
                                                hidden={field.hidden} 
                                            />
                                            <label for={option.value} hidden={field.hidden}>{option.label}</label>
                                        </div>
                                    ))}
                                </fieldset>
                            </div>
                        )
                    case('radio'):
                        return (
                            <div class="form-field">
                                <p class="">{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</p>
                                {field.description && <p class="field-description caption">{field.description}</p>}
                                <fieldset class={`inputs-list ${buttonToggles ? "toggle-button-list" : ""}`}>
                                    {field.options.map((option) => (
                                        <div class={`input-list-item ${buttonToggles ? "toggle-button" : ""}`}>
                                            <input 
                                                type="radio" 
                                                id={option.value} 
                                                name={field.name} 
                                                value={option.value} 
                                                required={field.required} 
                                                hidden={field.hidden}
                                            />
                                            <label for={option.value} hidden={field.hidden}>{option.label}</label>
                                        </div>
                                    ))}
                                </fieldset>
                            </div>
                        )
                    case('dropdown'):
                        return (
                            <div class="form-field">
                                <p class="h6">{field.label}</p>
                                {field.description && <p class="field-description caption">{field.description}</p>}
                                <fieldset class="inputs-list toggle-button-list">
                                    {field.options.map((option) => (
                                        <div class="input-list-item toggle-button">
                                            <input type="radio" id={option.value} name={field.name} value={option.value} required={field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                            <label for={option.value} hidden={field.hidden}>{option.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                        </div>
                                    ))}
                                </fieldset>
                            </div>
                        )
                    case('multi_line_text'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <textarea name={field.name} id={field.name} rows="4" cols="50" placeholder="" required={field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    default: null
                }
            })}
            </div>
        )
    })}

    {consentData && consentData.communicationsCheckboxes && 
        <div class="legal-consent">
            {consentData.communicationConsentText && <Fragment set:html={consentData.communicationConsentText} />}
            {consentData.communicationsCheckboxes.map((checkbox) => (
                <div class="form-field">
                    <div class="inputs-list">
                        <div class="input-list-item">
                            <input type="checkbox" id={`communication-consent-${formId}`} name={`communication-consent-${formId}`} value={`communication-consent-${formId}`} required />
                            <label for={`communication-consent-${formId}`}>{checkbox.label}</label>
                        </div>
                    </div>
                </div>
            ))}
        </div>
    }

    {consentData && 
        <div class="legal-consent">
            {consentData.consentToProcessText && <Fragment set:html={consentData.consentToProcessText} />}
            {consentData.consentToProcessCheckboxLabel &&
                <div class="form-field">
                    <div class="inputs-list">
                        <div class="input-list-item">
                            <input type="checkbox" id="consentToProcess" name="consentToProcess" value="consentToProcess" required />
                            <label for="consentToProcess">{consentData.consentToProcessCheckboxLabel}</label>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    {consentData && consentData.privacyText && 
        <div class="legal-consent">
            <Fragment set:html={consentData.privacyText} />
        </div>
    }

    <div class="form-field">
        <input type="submit" form={`form-${formId}`} value={formData.displayOptions.submitButtonText} />
    </div>


</form>

<script define:vars={{ portalId, formId, consentData, fields }}>

    const contactForm = document.querySelector(`#form-${formId}`)

    function getCookie(cname) {
        let name = cname + "=";
        let decodedCookie = decodeURIComponent(document.cookie);
        let ca = decodedCookie.split(';');
        for(let i = 0; i <ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == ' ') {
            c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    const hubspotCookie = getCookie('hubspotutk')

    const submitForm = async () => {

        const formData = new FormData(contactForm);
        const formObject = Object.fromEntries(formData)

        // Upload file and return file data
        const uploadFile = async (file) => {
            const res = await fetch(`/api/hubspot-file-upload`, {
                method: 'POST',
                body: file,
            });
            return await res.json()
        }
        
        // Map each field to Hubspot-friendly format
        Promise.all(Object.keys(formObject).map( async (key) => {

            const field = fields.find((field) => field.name === key)
            let value = formObject[key]

            // Use Hubspot Filemanager API to upload file to a folder in Hubspot and return its url
            if (field.fieldType === "file") {
                const fieldData = new FormData()
                fieldData.append("file", formObject[key])
                const fileData = await uploadFile(fieldData)
                if (await fileData && fileData.data) {
                    value = fileData.data[0].objects[0].url
                } else {
                    value = ''
                }
            }

            // Weird HTML quirks
            if (field.fieldType === 'single_checkbox' && value === 'on') value = true
            
            return {
                name: key,
                value: value,
                objectTypeId: field.objectTypeId
            }
            
        })).then(async (data) => {

            const formBody = {
                fields: data,
                context: {
                    pageUri: window.location.href,
                    pageName: document.title
                }
            }

            if (hubspotCookie) formBody.context.hutk = hubspotCookie

            // Pass user consent options
            if (consentData.communicationsCheckboxes) {
                formBody.legalConsentOptions = {
                    consent: { 
                        consentToProcess: true,
                        text: consentData.consentToProcessText,
                    },
                    communications: consentData.communicationsCheckboxes.map((checkbox) => {
                        return {
                            "value": true,
                            "subscriptionTypeId": checkbox.subscriptionTypeId,
                            "text": checkbox.label
                        }
                    })
                }
            }

            // Finally send the form info
            const response = await fetch(`https://api.hsforms.com/submissions/v3/integration/submit/${portalId}/${formId}`, {
                method: "POST",
                body: JSON.stringify(formBody),
                headers: {
                    "Content-type": "application/json; charset=UTF-8"
                }
            })
            console.log(await response.json())
        })
    }

    contactForm.addEventListener("submit", (e) => {
        e.preventDefault();
        submitForm();  
    })

</script>
