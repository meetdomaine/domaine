---
import { Icon } from 'astro-icon/components'
import cachedFetch from '../../../lib/cachedFetch';
import { getEnv } from '../../../lib/getEnv';

const { env } = Astro.locals.runtime;

interface Props {
    formId: any,
    buttonToggles?: boolean,
    key?: string
}

const { formId, buttonToggles, key } = Astro.props

const portalId = process.env.HUBSPOT_PORTAL_ID || env.HUBSPOT_PORTAL_ID;
const accessToken = process.env.HUBSPOT_ACCESS_TOKEN || env.HUBSPOT_ACCESS_TOKEN;

let formData;
try {
    console.log("Form fetch successful")
    const response = await cachedFetch(`https://api.hubapi.com/marketing/v3/forms/${formId}`, {
        method: "GET",
        headers: {
            'Authorization': `Bearer ${accessToken}`,
            "Content-type": "application/json; charset=UTF-8"
        }
    });
    formData = await response;
} catch (error) {
    console.error('Error fetching Hubspot form:', error);
    formData = {
        fieldGroups: [],
        legalConsentOptions: {},
        displayOptions: {
            submitButtonText: 'Submit'
        }
    };
}

const fieldGroups = formData.fieldGroups || [];
const consentData = formData.legalConsentOptions || {};

const fields = fieldGroups.flatMap((group) => {
  if (group.fields) {
    return group.fields?.map((field) => {
        return field
    })
  }
  return null
}) || [];
---
<form id={`form-${formId}${key != undefined ? `-${key}` : ''}`} >
    {fieldGroups?.map((group) => {
      if (group.fields) {
        
        return (
            <div class="form-field-group">
        
            {group.fields.map((field) => {
                switch (field.fieldType) {
                    case('single_line_text'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <input type="text" name={field.name} id={field.name} placeholder="" required={field.hidden ? false : field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    case('email'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <input type="email" name={field.name} id={field.name} placeholder="" required={field.hidden ? false : field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    case('phone'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <input type="tel" name={field.name} id={field.name} placeholder="" required={field.hidden ? false : field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    case('datepicker'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <input type="date" name={field.name} id={field.name} placeholder="" required={field.hidden ? false : field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    case('number'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <input type="number" name={field.name} id={field.name} placeholder="" required={field.hidden ? false : field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    case('file'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <input type="file" name={field.name} id={field.name} placeholder="" required={field.hidden ? false : field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    case('dropdown'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                {field.description && <p class="field-description caption">{field.description}</p>}
                                <select name={field.name} id={field.name} required={field.hidden ? false : field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId}>
                                    {field.options.map((option) => (
                                        <option value={option.value}>{option.label}</option>
                                    ))}
                                </select>
                            </div>
                        )
                    // case('dropdown'):
                    //     return (
                    //         <div class="form-field">
                    //             <p class="h6">{field.label}</p>
                    //             {field.description && <p class="field-description caption">{field.description}</p>}
                    //             <fieldset class="inputs-list toggle-button-list">
                    //                 {field.options.map((option) => (
                    //                     <div class="input-list-item toggle-button">
                    //                         <input type="radio" id={option.value} name={field.name} value={option.value} required={field.hidden ? false : field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                    //                         <label for={option.value} hidden={field.hidden}>{option.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                    //                     </div>
                    //                 ))}
                    //             </fieldset>
                    //         </div>
                    //     )
                    case('single_checkbox'):
                        return (
                            <div class="form-field">
                                <div class="inputs-list">
                                    <div class="input-list-item">
                                        <input type="checkbox" id={field.name} name={field.name} required={field.hidden ? false : field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                        <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                        {field.description && <p class="field-description caption">{field.description}</p>}
                                    </div>
                                </div>
                            </div>
                        )
                    case('multiple_checkboxes'):
                        return (
                            <div class="form-field">
                                <p class="">{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</p>
                                {field.description && <p class="field-description caption">{field.description}</p>}
                                <fieldset class={`inputs-list ${buttonToggles ? "toggle-button-list" : ""}`}>
                                    {field.options.map((option) => (
                                        <div class={`input-list-item ${buttonToggles ? "toggle-button" : ""}`} role="checkbox">
                                            <input 
                                                type="checkbox" 
                                                id={option.value} 
                                                name={field.name} 
                                                value={option.value} 
                                                required={field.hidden ? false : field.required} 
                                                hidden={field.hidden} 
                                            />
                                            <label for={option.value} hidden={field.hidden}>{option.label}</label>
                                        </div>
                                    ))}
                                </fieldset>
                            </div>
                        )
                    case('radio'):
                        return (
                            <div class="form-field">
                                <p class="">{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</p>
                                {field.description && <p class="field-description caption">{field.description}</p>}
                                <fieldset class={`inputs-list ${buttonToggles ? "toggle-button-list" : ""}`}>
                                    {field.options.map((option) => (
                                        <div class={`input-list-item ${buttonToggles ? "toggle-button" : ""}`}>
                                            <input 
                                                type="radio" 
                                                id={option.value} 
                                                name={field.name} 
                                                value={option.value} 
                                                required={field.hidden ? false : field.required} 
                                                hidden={field.hidden}
                                            />
                                            <label for={option.value} hidden={field.hidden}>{option.label}</label>
                                        </div>
                                    ))}
                                </fieldset>
                            </div>
                        )
                    case('multi_line_text'):
                        return (
                            <div class="form-field">
                                <label for={field.name} hidden={field.hidden}>{field.label}{!field.required && <span class="optional-label">(Optional)</span>}</label>
                                <textarea name={field.name} id={field.name} rows="4" cols="50" placeholder="" required={field.hidden ? false : field.required} hidden={field.hidden} data-object-type-id={field.objectTypeId} />
                                {field.description && <p class="field-description caption">{field.description}</p>}
                            </div>
                        )
                    default: null
                }
            })}
            </div>
        )
      }

      if (group.richText) return (
        <div class="rich-text-block">
          <Fragment set:html={group.richText} />
        </div>
        )
    })}

    {consentData && consentData.communicationsCheckboxes && 
        <div class="legal-consent">
            {consentData.communicationConsentText && <Fragment set:html={consentData.communicationConsentText} />}
            {consentData.communicationsCheckboxes.map((checkbox) => (
                <div class="form-field">
                    <div class="inputs-list">
                        <div class="input-list-item">
                            <input type="checkbox" id={`communication-consent-${formId}${key != undefined ? `-${key}` : ''}`} name={`communication-consent`} value={`communication-consent-${formId}`} required />
                            <label for={`communication-consent-${formId}${key != undefined ? `-${key}` : ''}`}><Fragment set:html={checkbox.label}></Fragment></label>
                        </div>
                    </div>
                </div>
            ))}
        </div>
    }

    {consentData && 
        <div class="legal-consent">
            {consentData.consentToProcessText && <Fragment set:html={consentData.consentToProcessText} />}
            {consentData.consentToProcessCheckboxLabel &&
                <div class="form-field">
                    <div class="inputs-list">
                        <div class="input-list-item">
                            <input type="checkbox" id={`consent-to-process-${formId}${key != undefined ? `-${key}` : ''}`} name={`consent-to-process`} value={`consent-to-process-${formId}`} required />
                            <label for={`consent-to-process-${formId}${key != undefined ? `-${key}` : ''}`}>{consentData.consentToProcessCheckboxLabel}</label>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    {consentData && consentData.privacyText && 
        <div class="legal-consent">
            <Fragment set:html={consentData.privacyText} />
        </div>
    }
    
    <div class="confirmation-message h4" data-color-scheme="brand-02">
        <Icon name="icon-email" class="confirmation-icon" />
        Confirmed!
    </div>

    <div class="form-field">
        <input type="submit" form={`form-${formId}${key != undefined ? `-${key}` : ''}`} value={formData.displayOptions?.submitButtonText || 'Submit'} />
    </div>

</form>


<script define:vars={{ portalId, formId, consentData, fields, key }}>

    const contactForm = document.querySelector(`#form-${formId}${key != undefined ? `-${key}` : ''}`)
    const submitButton = contactForm.querySelector('input[type="submit"]')
    const confirmationMessage = contactForm.querySelector('.confirmation-message')

    const getCookie = (cname) => {
        let name = cname + "=";
        let decodedCookie = decodeURIComponent(document.cookie);
        let ca = decodedCookie.split(';');
        for(let i = 0; i <ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == ' ') {
            c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    const handleSuccess = (response) => {
        console.log(response)
        if (response.inlineMessage) {
            confirmationMessage.innerHTML = response.inlineMessage
            confirmationMessage.style.display = "block"
            submitButton.parentElement.style.display = "none"
        }
        if (response.redirectUri) {
            window.open(response.redirectUri, '_blank').focus();
        }
        contactForm.reset()
    }

    const hubspotCookie = getCookie('hubspotutk')

    const submitForm = async () => {

        const formData = new FormData(contactForm);


        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);
        const source = urlParams.get('utm_source')
        const medium = urlParams.get('utm_medium')

        formData.delete("communication-consent");
        formData.delete("consent-to-process");
        const formObject = Object.fromEntries(formData)

        // Upload file and return file data
        const uploadFile = async (file) => {
            const res = await fetch(`/api/hubspot-file-upload`, {
                method: 'POST',
                body: file,
            });
            return await res.json()
        }
        
        // Map each field to Hubspot-friendly format
        Promise.all(Object.keys(formObject).map( async (key) => {

            const field = fields.find((field) => field?.name === key)
            let value = formObject[key]

            if (key === 'utm_source' && source) value = source
            if (key === 'utm_medium' && medium) value = medium

            // if (!field) return
                
            // Use Hubspot Filemanager API to upload file to a folder in Hubspot and return its url
            if (field.fieldType === "file") {
                const fieldData = new FormData()
                fieldData.append("file", formObject[key])
                const fileData = await uploadFile(fieldData)
                if (await fileData && fileData.data) {
                    value = fileData.data[0].objects[0].url
                } else {
                    value = ''
                }
            }

            // Weird HTML quirks
            if (field.fieldType === 'single_checkbox' && value === 'on') value = true

            return {
                name: key,
                value: value,
                objectTypeId: field.objectTypeId
            }
            
        })).then(async (data) => {

            const formBody = {
                fields: data,
                context: {
                    pageUri: window.location.href,
                    pageName: document.title
                }
            }

            if (hubspotCookie) formBody.context.hutk = hubspotCookie

            // Pass user consent options
            if (consentData.communicationsCheckboxes) {

                const consentField = contactForm.querySelector('.legal-consent')
                const consentText = consentField.innerText

                formBody.legalConsentOptions = {
                    consent: { 
                        consentToProcess: true,
                        // text: consentData.consentToProcessText,
                        text: consentText ? consentText : null
                    },
                    communications: consentData.communicationsCheckboxes.map((checkbox) => {
                        return {
                            "value": true,
                            "subscriptionTypeId": checkbox.subscriptionTypeId,
                            "text": checkbox.label
                        }
                    })
                }
            }

            // Finally send the form info
            const response = await fetch(`https://api.hsforms.com/submissions/v3/integration/submit/${portalId}/${formId}`, {
                method: "POST",
                body: JSON.stringify(formBody),
                headers: {
                    "Content-type": "application/json; charset=UTF-8"
                }
            })
            if (response.ok) {
                handleSuccess(await response.json())
            }
        })
    }

    contactForm.addEventListener("submit", (e) => {
        e.preventDefault();
        submitForm();  
    })

</script>

<style>

    .confirmation-message {
        display: none;
        border-radius: var(--radius-sm);
        padding: var(--space-sm);
    }

    .confirmation-icon {
        width: 1em;
        height: auto;
    }

    .rich-text-block {
      padding-top: var(--space-2xs);
    }
</style>