---
import type { SanityAsset } from '@sanity/image-url/lib/types/types';
import { urlFor } from '../../../lib/cms-queries';
import AtomSanityImage from './atom-sanityImage.astro';
import AtomCursorFollow from './atom-cursorFollow.astro';

interface Props {
  image?: SanityImage,
  video?: MuxVideo,
  autoplay?: boolean,
  sizes: string,
  videoWidth?: string,
  videoHeight?: string,
  cover?: boolean,
  contain?: boolean,
  eager?: boolean,
  aspectRatio?: number,
  alt?: string,
  preserveAspect?: boolean,
  preload?: boolean,
  maxWidth?: number,
}

const { video, image, sizes, eager, aspectRatio, preserveAspect, cover, contain, alt, autoplay, videoWidth, videoHeight, preload, maxWidth } = Astro.props;
---

{video ? 
    <mux-player
        id={`mux-video_${video.asset.playbackId}`}
        playback-id={video.asset.playbackId}
        metadata-video-title={video.asset.filename}
        autoplay={autoplay === false ? false : true}
        preload={preload ? "auto" : "none"}
        loop
        {...(autoplay !== false && { muted: true })}
        style={{ aspectRatio: aspectRatio }}
        width={videoWidth}
        height={videoHeight}
        eager={eager && autoplay === false ? "true" : "false"}
        data-cover={cover ? "true" : "false"}
        data-autoplay={autoplay === false ? "false" : "true"}
        nohotkeys
    ></mux-player>
    : image ?
    <AtomSanityImage 
        image={image}
        sizes={sizes}
        eager={eager}
        aspectRatio={aspectRatio}
        cover={cover}
        contain={contain}
        alt={alt}
        preserveAspect={preserveAspect}
        maxWidth={maxWidth}
    />
    : <p>NO MEDIA</p>
}

{video && autoplay === false &&
  <AtomCursorFollow>
    <button 
      id={`play-button_${video.asset.playbackId}`} 
      class="glass-dark play-button"
      data-active="false"
    >Play</button>
  </AtomCursorFollow>
}

<script define:vars={{ video, autoplay }}>
  document.addEventListener("astro:page-load", () => {
    if (video && !autoplay) {
      const muxVideo = document.getElementById(`mux-video_${video.asset.playbackId}`)
      const playButton = document.getElementById(`play-button_${video.asset.playbackId}`)

      if (muxVideo && playButton) {
        muxVideo.addEventListener("click", () => {

          const isPlaying = muxVideo.currentTime > 0 && !muxVideo.paused && !muxVideo.ended && muxVideo.readyState > 2

          if (isPlaying) {
            playButton.innerText = "Play"
            playButton.dataset.active = "false"
            return muxVideo.pause()
            
          }
          playButton.innerText = "Pause"
          playButton.dataset.active = "true"
          return muxVideo.play()
        })
      }
    }
  })
</script>

<style>
    mux-player {
      --media-object-fit: cover;
      --media-object-position: center;
      --controls: none;
      --dialog: none;
      --loading-indicator: none;
      /* object-fit: cover; */
    }

    mux-player[data-cover="true"] {
      height: 100%;
    }

    mux-player[data-autoplay="false"] {
      cursor: pointer;
    }

    .play-button {
      position: absolute;
      top: 50%;
      left: 50%;
      translate: -50% -50%;
      z-index: 2;
      transition: opacity var(--anim-lg);
      pointer-events: none;
      opacity: 0;
      transition: opacity var(--anim-sm);
    }

    :global(*:has(mux-player:hover)) .play-button[data-active="false"] {
      opacity: 1;
    }

    @media screen and (width <= 768px) {
      .play-button {
        position: absolute;
        top: 50%;
        left: 50%;
        opacity: 1;
      }

      .play-button[data-active="true"] {
         opacity: 0;
      }
    }

</style>