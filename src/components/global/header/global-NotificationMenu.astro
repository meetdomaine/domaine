---
import AtomLinkCard from "../atoms/atom-linkCard.astro"
import { sanityClient } from "sanity:client"
import { blogCardFields, projectGridFields } from "../utils/cms-queries"
import { allBlogPosts_Domaine, allBlogPosts_Studio, allProjects_Domaine, allProjects_Studio, allEvents_upcoming, allCareers } from "../utils/cms-content"
import { Icon } from "astro-icon/components"
import AtomNotificationLink from "../atoms/atom-notificationLink.astro"
import AtomSanityImage from "../atoms/atom-sanityImage.astro"
import AtomTag from "../atoms/atom-tag.astro"
import AtomCounter from "../atoms/atom-counter.astro"

const { 
  currentBrand, 
  showPromoMessage, 
  promoMessage, 
  promoMessageUrl, 
  promoMessageIcon,
  clocks,
  showLinkCard,
  linkCardTitle,
  linkCardText,
  linkCardImage,
  linkCardNewTab,
  linkCardUrl,
  showCareers,
  careersHeading,
  careersSubheading,
  careersUrl,
  careersNewTab,
} = Astro.props

// console.log(clocks)

const latestProjects = currentBrand.slug.current === "/studio" ? allProjects_Studio : allProjects_Domaine
const latestBlogPost = currentBrand.slug.current === "/studio" ? allBlogPosts_Studio : allBlogPosts_Domaine
const upcomingEvent = allEvents_upcoming[0]

// console.log(upcomingEvent)
// console.log(latestWork)
---
<dialog popover id="notification-menu" class="notification-menu" data-lenis-prevent>

  {showPromoMessage && promoMessage &&
    promoMessageUrl ? 
      <a class="promo-message caption" href={promoMessageUrl} data-color-scheme="brand-02">{promoMessageIcon && <Icon name={promoMessageIcon} />}{promoMessage}</a>
    : <p class="promo-message caption" data-color-scheme="brand-02">{promoMessageIcon && <Icon name={promoMessageIcon} />}{promoMessage}</p>
  }

  <div class="latest-projects">
    {latestProjects.slice(0,2).map((project) => (
      <AtomNotificationLink 
        title="Latest Work"
        text={project.title}
        url={`${currentBrand.slug.current === "/studio" ? "/studio" : ""}/work/${project.slug.current}`}
        image={project.thumbnailMedia.image ? project.thumbnailMedia.image : project.thumbnailImageSecondary.image}
      />
    ))}
  </div>

  {clocks &&
    <div class="clocks" data-color-scheme="glass-dark">
      {clocks.map((clock) => (
        <div class="clock" data-timezone={clock.timezone} data-daytime="true">
          <div class="clock-icon">
            <span class="tick"></span>
            <span class="tick"></span>
            <span class="tick"></span>
            <span class="tick"></span>
            <span class="hour-hand"></span>
            <span class="minute-hand"></span>
            <span class="second-hand"></span>
            <span class="center-pin"></span>
          </div>
          <div class="clock-info">
            <p>{clock.location}</p>
            <div class="time-info">
              <Icon name="icon-day" class="icon-day" />
              <Icon name="icon-night" class="icon-night" />
              <p class="time">00:00</p>
            </div>
          </div>
        </div>
      ))}
    </div>
  }

  {upcomingEvent && 
    <div class="event-card" data-color-scheme="glass-dark">
      <p class="caption">Upcoming Events</p>
      <a class="event-info color-reset" href={`/events/${upcomingEvent.slug.current}`} data-color-scheme="default">
        <div class="event-date">
          <p class="event-month caption">August</p>
          <p class="event-day h4">20</p>
        </div>
        <div class="event-details">
          <p class="event-title">{upcomingEvent.title}</p>
          <p class="event-location caption">{upcomingEvent.location}</p>
        </div>
      </a>
    </div>
  }

{showLinkCard && showCareers &&
  <div class="brand-cards">
    {showLinkCard && linkCardTitle &&
      <AtomNotificationLink 
        title={linkCardTitle}
        text={linkCardText}
        url={linkCardUrl}
        newTab={linkCardNewTab}
        image={linkCardImage.image}
      />
    }
    {showCareers && careersHeading && careersUrl &&
      <a href={careersUrl} class="careers-card" data-color-scheme="glass-dark" target={careersNewTab ? "_blank" : ""}>
        <Icon name="dot-peace" class="careers-icon" />
        <div class="careers-heading">
          <p class="h6">{careersHeading}</p>
          <AtomCounter 
            count={allCareers.length}
          />
        </div>
        {careersSubheading && <p class="careers-subheading">{careersSubheading}</p>}
      </a>
    }
  </div>
}
  

<div class="blog-posts" data-color-scheme="glass-dark">
  <p class="blog-posts-heading caption">Insights</p>
  {latestBlogPost.slice(0,2).map((blogPost) => (
    <div class="blog-post">
      <div class="blog-post-content">
        <AtomTag
          text={blogPost.category.title}
          url={`${currentBrand.slug.current === "/studio" ? "/studio" : ""}/insights/${blogPost.category.slug.current}`} 
        />
        <a class="blog-post-title" href={`${currentBrand.slug.current === "/studio" ? "/studio" : ""}/insights/${blogPost.category.slug.current}/${blogPost.slug.current}`} >{blogPost.title}</a>
      </div>
      <div class="blog-post-media">
        <AtomSanityImage 
          sizes="20vw"
          image={blogPost.thumbnailImage.image}
          aspectRatio={3 / 4}
        />
      </div>
    </div>
  ))}
</div>


</dialog>

<script>
  const notificationMenu = document.getElementById('notification-menu')
  const notificationToggle: HTMLElement = document.getElementById('notification-toggle')
  const clocks = notificationMenu.querySelectorAll('.clock')

  notificationMenu.addEventListener("toggle", (e: ToggleEvent) => {
    notificationToggle.dataset.active = e.newState === "open" ? "true" : "false"
  })

  let pageEndOpen = false
  let currentScroll = window.scrollY

  window.addEventListener("scroll", (e) => {
    const scrolledTo = window.scrollY + window.innerHeight
    const isAtPageEnd = document.body.scrollHeight === scrolledTo
    const newScroll = window.scrollY
    if (isAtPageEnd && !notificationMenu.matches(":popover-open")) {
      pageEndOpen = true
      notificationMenu.showPopover()
    } else if (newScroll < currentScroll && pageEndOpen) {
      pageEndOpen = false
      notificationMenu.hidePopover()
    }
    currentScroll = newScroll
    
  })

  const updateTime = () => {
      
      clocks.forEach((clock: HTMLElement) => {
        let time, hours, minutes, seconds
        
        const timezoneId = clock.dataset.timezone
        const timeElement: HTMLElement = clock.querySelector('.time')

        time = new Date(new Date().toLocaleString("en-US", {timeZone: timezoneId } ));
        hours = time.getHours()
        minutes = time.getMinutes()
        seconds = time.getSeconds()

        timeElement.innerText = `${hours}:${minutes}`
        if (hours >= 19) clock.dataset.daytime = "false"

        clock.style.setProperty('--hours', hours)
        clock.style.setProperty('--minutes', minutes)
        clock.style.setProperty('--seconds', seconds)
        
        
        // console.log(hours)
        
      })
      // requestAnimationFrame(updateTime)
    }

    setInterval(updateTime, 1000)
  
</script>

<style>
  .notification-menu {
    position: fixed;
    justify-self: flex-end;
    flex-direction: column;
    justify-content: flex-start;
    align-items: stretch;
    top: calc(var(--header-height));
    right: var(--page-margin);
    max-height: calc(100dvh - var(--header-height));
    margin: 0;
    padding-bottom: var(--space-lg);
    gap: var(--space-xs);
    /* opacity: 0; */
    translate: calc(100% + var(--page-margin)) 0;
    transition: translate var(--anim-md), display var(--anim-md) allow-discrete;
    border: none;
    width: var(--notification-menu-width);
    border-radius: var(--radius-sm);
    overflow-y: auto;
    background-color: transparent;
  }

  .notification-menu:popover-open,
  .notification-menu[open] {
    display: flex;
    translate: 0% 0;
    /* opacity: 1; */
  }

  @starting-style {
    .notification-menu:popover-open {
      display: flex;
      /* opacity: 0; */
      translate: calc(100% + var(--page-margin)) 0;
    }
  }

  .promo-message {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    padding: var(--space-2xs);
    border-radius: var(--radius-sm);
    text-decoration: none;
    gap: var(--space-xs);
    position: sticky;
    top: 0;
    z-index: 3;
  }

  .latest-projects {
    display: flex;
    justify-content: stretch;
    flex-direction: row;
    gap: var(--space-2xs);
    /* max-width: 100%; */
  }

  .latest-projects :global(.notification-link-card) {
    flex: 0 1 100%;
  }

  .clocks {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: flex-start;
    padding: var(--space-sm) var(--space-md);
    gap: var(--space-xs);
    border-radius: var(--radius-sm);
  }

  .clock {
    flex: 0 1 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-2xs);
    text-align: center;
  }

  .clock-icon {
    position: relative;
    background-color: var(--color-background-secondary);
    align-self: stretch;
    margin-inline: 10%;
    aspect-ratio: 1 / 1;
    border-radius: 100vw;
    --color-accent: var(--color-blue);
  }

  .clock[data-daytime="true"] .clock-icon {
    --color-background: var(--color-lightest);
    --color-background-secondary: var(--color-light);
    --color-foreground: var(--color-darkest);
    --color-foreground-secondary: var(--color-dark);
  }

  .clock[data-daytime="true"] .icon-night {
    display: none;
  }

  .clock[data-daytime="false"] .icon-day {
    display: none;
  }

  .clock-icon .tick {
    --width: 2px;
    --height: 6px;
    --inset: var(--space-xs);
    display: block;
    background-color: var(--color-background-secondary);
    position: absolute;
    border-radius: 100vw;
  }

  .clock-icon .tick:nth-child(1),
  .clock-icon .tick:nth-child(3) {
    width: var(--width);
    height: var(--height);
    left: 50%;
    translate: -50% 0;
  }

  .clock-icon .tick:nth-child(2),
  .clock-icon .tick:nth-child(4) {
    width: var(--height);
    height: var(--width);
    top: 50%;
    translate: 0 -50%;
  }

  .clock-icon .tick:nth-child(1) {
    top: var(--inset);
  }

  .clock-icon .tick:nth-child(2) {
    right: var(--inset);
  }

  .clock-icon .tick:nth-child(3) {
    bottom: var(--inset);
  }

  .clock-icon .tick:nth-child(4) {
    left: var(--inset);
  }

  .clock-icon .hour-hand,
  .clock-icon .minute-hand,
  .clock-icon .second-hand {
    --overhang: var(--space-xs);
    position: absolute;
    inset: 0;
    display: flex;
    justify-content: center;
    align-items: flex-start;
  }

  .clock-icon .hour-hand::before,
  .clock-icon .minute-hand::before,
  .clock-icon .second-hand::before {
    content: "";
    width: 1px;
    background-color: var(--color);
    height: calc(50% - var(--height) + var(--overhang));
    margin-top: var(--height);
    border-radius: 100vw;
  }

  .clock-icon .hour-hand {
    --color: var(--color-foreground);
    --height: 25%;
    rotate: calc( ((var(--hours) + (var(--minutes) / 60)) / 24) * 720 * 1deg);
  }

  .clock-icon .minute-hand {
    --color: var(--color-foreground);
    --height: 20%;
    rotate: calc( (var(--minutes) / 60) * 360 * 1deg);
  }

  .clock-icon .second-hand {
    --color: var(--color-accent);
    --height: 15%;
    --overhang: var(--space-sm);
    rotate: calc( (var(--seconds) / 60) * 360 * 1deg);
  }

  .clock-icon .center-pin {
    position: absolute;
    border-radius: 100vw;
    background-color: var(--color-accent);
    width: 8%;
    aspect-ratio: 1 / 1;
    top: 50%;
    left: 50%;
    translate: -50% -50%;
  }

  .clock-icon::before {
    content: "";
    position: absolute;
    inset: var(--space-2xs);
    background-color: var(--color-background);
    border-radius: 100vw;
  }

  .clock-info {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-3xs);
  }

  .clock-info p {
    margin: 0;
  }

  .time-info {
    color: var(--color-foreground-secondary);
    display: flex;
    flex-direction: row;
    gap: var(--space-2xs);
    align-items: center;
  }

  .event-card {
    padding: var(--space-xs);
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }

  .event-title {
    margin: 0;
  }

  .event-info {
    border-radius: var(--radius-sm);
    text-decoration: none;
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-xs);
  }

  .event-date {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    border-right: 1px solid var(--color-border);
    padding-inline-end: var(--space-sm);
  }

  .event-day {
    margin: 0;
  }

  .event-details {

  }

  .event-location {
    color: var(--color-foreground-secondary);
  }

  .brand-cards {
    display: flex;
    flex-direction: row;
    justify-content: stretch;
    gap: var(--space-xs);
  }

  .brand-cards > :global(*) {
    flex: 0 1 100%;
  }

  .careers-card {
    padding: var(--space-xs);
    display: flex;
    flex-direction: column;
    justify-content: stretch;
    align-items: center;
    text-align: center;
    text-decoration: none;
  }

  .careers-icon {
    flex: 0 1 100%;
    max-width: 80%;
    width: auto;
  }

  .careers-heading {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    gap: 0em;
  }

  .careers-subheading {
    color: var(--color-foreground-secondary);
  }

  .blog-posts {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    padding: var(--space-xs);
    border-radius: var(--radius-sm);
  }

  .blog-posts-heading {
    margin-bottom: 0.8em;
  }

  .blog-post {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    gap: var(--space-xs);
    align-items: flex-start;
    border-top: 1px solid var(--color-border);
    padding-block: var(--space-sm);
  }

  .blog-post-content {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: var(--space-xs);
  }

  .blog-post-title {
    text-decoration: none;
  }

  .blog-post-media {
    flex: 0 0 20%;
  }

  @media screen and (width <= 768px) {
    .notification-menu,
    .notification-menu:popover-open,
    .notification-menu[open] {
        display: none;
    }
  }
</style>