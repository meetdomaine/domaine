---
import { Icon } from "astro-icon/components"
import AtomNotificationLink from "../atoms/atom-notificationLink.astro"
import AtomCounter from "../atoms/atom-counter.astro"
import GlobalBlogTile from "../blog/global-BlogTile.astro"
import type { UseDateTimeFormatOptions } from "sanity"
import { checkDateIsPast } from "../../../lib/check-date-is-past"
import { Translations } from "../../../lib/locales"
import { getLocaleString, getLocaleUrl, getTranslationString } from "../../../lib/translations"
import { getCollection } from "astro:content"
const {
  content,
  currentBrand, 
  locale,
  brand
} = Astro.props

const monthOptions: UseDateTimeFormatOptions = {
  month: "short"
}

const latestProjects = currentBrand.slug.current === "/studio" ? await getCollection('projects_Studio') : await getCollection('projects_Domaine')

const allBlogPosts = await getCollection('blogPosts')
const latestBlogPosts = allBlogPosts.filter((blogPost) => blogPost.data.agencyBrand.name === brand)

const events = await getCollection('events')
const upcomingEvents = events.filter((event) => !event.data.isPrivate && !checkDateIsPast(new Date(event.data.dateTime)) )
const allCareers = await getCollection('careers');
---
<dialog popover id="notification-menu" class="notification-menu" data-lenis-prevent autofocus="true">

  {(content.showPromoMessage && content.promoMessage) &&
    <a 
      class="promo-message caption" 
      href={content.promoMessageUrl} 
      data-color-scheme="brand-02"
    >
      {/* {content.promoMessageIcon && 
        <Icon name={content.promoMessageIcon} />
      } */}
      {getTranslationString(content.promoMessage, locale)}
    </a>
  }

  <div class="latest-projects">
    {latestProjects.slice(0,2).map((project) => (
      <AtomNotificationLink 
        title={project.data.title}
        url={getLocaleUrl(`${currentBrand.slug.current === "/studio" ? "/studio" : ""}/work/${project.data.slug.current}`, locale)}
        image={project.data.thumbnailMedia.image ? project.data.thumbnailMedia.image : project.data.thumbnailImageSecondary.image}
      />
    ))}
  </div>

  {content.locationClocks?.length > 0 &&
    <div class="clocks" data-color-scheme="glass-dark">
      {content.locationClocks.map((clock) => (
        <div class="clock" data-timezone={clock.timezone} data-daytime="true">
          <div class="clock-icon">
            <span class="tick"></span>
            <span class="tick"></span>
            <span class="tick"></span>
            <span class="tick"></span>
            <span class="hour-hand"></span>
            <span class="minute-hand"></span>
            <span class="second-hand"></span>
            <span class="center-pin"></span>
          </div>
          <div class="clock-info">
            <p>{clock.city}</p>
            <div class="time-info">
              <Icon name="icon-day" class="icon-day" />
              <Icon name="icon-night" class="icon-night" />
              <p class="time">00:00</p>
            </div>
          </div>
        </div>
      ))}
    </div>
  }

  {upcomingEvents?.length > 0 && 
    <div class="event-card" data-color-scheme="glass-dark">
      {content.eventsTitle && <p class="caption">{getTranslationString(content.eventsTitle, locale)}</p>}
      {upcomingEvents.map((event) => (
        <a 
          class="event-info color-reset" 
          href={getLocaleUrl(`/events/${event.id}`, locale)} 
          data-color-scheme="default"
        >
          <div class="event-date">
            <p class="event-month caption">{new Intl.DateTimeFormat(locale ? locale : "en-us", monthOptions).format(new Date(event.data.dateTime))}</p>
            <p class="event-day h4">{new Date(event.data.dateTime).getDate()}</p>
          </div>
          <div class="event-details">
            <p class="event-title">{getTranslationString(event.data.title)}</p>
            <p class="event-location caption">{getTranslationString(event.data.location, locale)}</p>
          </div>
        </a>
      ))}
    </div>
  }

{content.showLinkCard && content.showCareers &&
  <div class="brand-cards">
    {content.showLinkCard && content.linkCardTitle &&
      <AtomNotificationLink 
        title={content.linkCardTitle}
        subtitle={content.linkCardText}
        url={content.linkCardUrl}
        newTab={content.linkCardNewTab}
        image={content.linkCardImage.image}
        locale={locale}
      />
    }
    {content.showCareers && content.careersHeading && content.careersUrl &&
      <a href={content.careersUrl} class="careers-card" data-color-scheme="glass-dark" target={content.careersNewTab ? "_blank" : ""}>
        <Icon name="dot-laptop" class="careers-icon" />
        <div class="careers-heading">
          {content.careersHeading && <p class="h6">{getTranslationString(content.careersHeading.text, locale)}</p>}
          <AtomCounter 
            count={allCareers.length}
          />
        </div>
        {content.careersSubheading && <p class="careers-subheading">{getTranslationString(content.careersSubheading, locale)}</p>}
      </a>
    }
  </div>
}
  
{content.showBlog && latestBlogPosts.length > 1 &&
  <div class="blog-posts" data-color-scheme="glass-dark">
    <p class="blog-posts-heading caption">{getLocaleString("INSIGHTS")}</p>
    {latestBlogPosts.slice(0,2).map((blogPost) => (
      <GlobalBlogTile 
        post={blogPost.data}
        currentBrand={currentBrand}
        locale={locale}
      />
    ))}
  </div>
}


</dialog>

<script>
  import { isMobileBreakpoint } from "../../../lib/check-device"
  import { getIsDaytime, getLocalTime } from "../../../lib/get-local-time"
  const notificationMenu = document.getElementById('notification-menu')
  const notificationToggle: HTMLElement = document.getElementById('notification-toggle')
  const clocks = notificationMenu.querySelectorAll('.clock')

  notificationMenu.addEventListener("toggle", (e: ToggleEvent) => {
    notificationToggle.dataset.active = e.newState === "open" ? "true" : "false"
  })

  let pageEndOpen = false
  let currentScroll = window.scrollY

  if (!isMobileBreakpoint) {
    window.addEventListener("scroll", (e) => {
      const scrolledTo = window.scrollY + window.innerHeight
      const isAtPageEnd = document.body.scrollHeight === scrolledTo
      const newScroll = window.scrollY
      if (isAtPageEnd && !notificationMenu.matches(":popover-open")) {
        pageEndOpen = true
        notificationMenu.showPopover()
        // notificationMenu.blur()
      } else if (newScroll < currentScroll && pageEndOpen) {
        pageEndOpen = false
        notificationMenu.hidePopover()
      }
      currentScroll = newScroll
      
    })
  }

  const updateTime = () => {
      
      clocks.forEach((clock: HTMLElement) => {
        let time, hours, minutes, seconds
        
        const timezoneId = clock.dataset.timezone
        const cleanedTimezoneId = timezoneId?.replace(/[\u200B-\u200D\uFEFF]/g, '').trim()
        const timeElement: HTMLElement = clock.querySelector('.time')

        time = new Date(new Date().toLocaleString("en-US", {timeZone: cleanedTimezoneId} ));
        hours = time.getHours()
        minutes = time.getMinutes()
        seconds = time.getSeconds()

        getLocalTime(timeElement, cleanedTimezoneId, 'innerText')
        getLocalTime(clock, cleanedTimezoneId, 'customProps')
        getIsDaytime(clock, cleanedTimezoneId)
        
      })
    }

    if (!isMobileBreakpoint) {
      setInterval(updateTime, 1000)
    }
  
</script>

<style>
  .notification-menu {
    position: fixed;
    justify-self: flex-end;
    flex-direction: column;
    justify-content: flex-start;
    align-items: stretch;
    top: calc(var(--header-height));
    right: var(--page-margin);
    left: unset;
    max-height: calc(100dvh - var(--header-height));
    margin: 0;
    /* padding-bottom: var(--space-lg); */
    gap: var(--space-3xs);
    /* opacity: 0; */
    translate: calc(100% + var(--page-margin)) 0;
    transition: translate var(--anim-md), display var(--anim-md) allow-discrete, filter var(--anim-md);
    border: none;
    width: var(--notification-menu-width);
    border-radius: var(--radius-sm);
    overflow-y: auto;
    background-color: transparent;
    --shadow-color: rgba(20, 20, 20, 0.9);
    /* box-shadow: 0 0 5rem var(--shadow-color) ; */
    filter: drop-shadow(0rem 0rem 2rem rgba(50, 50, 50, 0));
    backdrop-filter: var(--background-blur);
    -webkit-backdrop-filter: var(--background-blur);
    background-color: transparent;
  }

  .notification-menu:popover-open {
    display: flex;
    translate: 0% 0;
    filter: drop-shadow(0rem 0rem 2rem rgba(50, 50, 50, 0.7));
    /* opacity: 1; */
  }

  @starting-style {
    .notification-menu:popover-open {
      display: flex;
      /* opacity: 0; */
      translate: calc(100% + var(--page-margin)) 0;
      filter: drop-shadow(0rem 0rem 2rem rgba(50, 50, 50, 0.7));
    }
  }

  .promo-message {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    padding: var(--space-2xs);
    border-radius: var(--radius-sm);
    text-decoration: none;
    gap: var(--space-xs);
    position: sticky;
    top: 0;
    z-index: 3;
  }

  .latest-projects {
    display: flex;
    justify-content: stretch;
    flex-direction: row;
    gap: var(--space-3xs);
    /* max-width: 100%; */
  }

  .latest-projects :global(.notification-link-card) {
    flex: 0 1 100%;
  }

  .clocks {
    position: relative;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: flex-start;
    padding: var(--space-sm) var(--space-md);
    gap: var(--space-xs);
    border-radius: var(--radius-sm);
  }

  /* .clocks::after {
    content: "";
    position: absolute;
    inset: 0;
    z-index: 999;
    background-color: red;
  } */

  .clock {
    flex: 0 1 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-2xs);
    text-align: center;
  }

  .clock-icon {
    position: relative;
    background-color: var(--color-background-secondary);
    align-self: stretch;
    margin-inline: 10%;
    aspect-ratio: 1 / 1;
    border-radius: 100vw;
    --color-accent: var(--color-blue);
  }

  .clock[data-is-daytime="true"] .clock-icon {
    --color-background: var(--color-lightest);
    --color-background-secondary: var(--color-light);
    --color-foreground: var(--color-darkest);
    --color-foreground-secondary: var(--color-dark);
  }

  .clock[data-is-daytime="true"] .icon-night {
    display: none;
  }

  .clock[data-is-daytime="false"] .icon-day {
    display: none;
  }

  .clock-icon .tick {
    --width: 2px;
    --height: 6px;
    --inset: var(--space-xs);
    display: block;
    background-color: var(--color-background-secondary);
    position: absolute;
    border-radius: 100vw;
  }

  .clock-icon .tick:nth-child(1),
  .clock-icon .tick:nth-child(3) {
    width: var(--width);
    height: var(--height);
    left: 50%;
    translate: -50% 0;
  }

  .clock-icon .tick:nth-child(2),
  .clock-icon .tick:nth-child(4) {
    width: var(--height);
    height: var(--width);
    top: 50%;
    translate: 0 -50%;
  }

  .clock-icon .tick:nth-child(1) {
    top: var(--inset);
  }

  .clock-icon .tick:nth-child(2) {
    right: var(--inset);
  }

  .clock-icon .tick:nth-child(3) {
    bottom: var(--inset);
  }

  .clock-icon .tick:nth-child(4) {
    left: var(--inset);
  }

  .clock-icon .hour-hand,
  .clock-icon .minute-hand,
  .clock-icon .second-hand {
    --overhang: var(--space-xs);
    position: absolute;
    inset: 0;
    display: flex;
    justify-content: center;
    align-items: flex-start;
  }

  .clock-icon .hour-hand::before,
  .clock-icon .minute-hand::before,
  .clock-icon .second-hand::before {
    content: "";
    width: 1px;
    background-color: var(--color);
    height: calc(50% - var(--height) + var(--overhang));
    margin-top: var(--height);
    border-radius: 100vw;
  }

  .clock-icon .hour-hand {
    --color: var(--color-foreground);
    --height: 25%;
    rotate: calc( ((var(--hours) + (var(--minutes) / 60)) / 24) * 720 * 1deg);
  }

  .clock-icon .minute-hand {
    --color: var(--color-foreground);
    --height: 20%;
    rotate: calc( (var(--minutes) / 60) * 360 * 1deg);
  }

  .clock-icon .second-hand {
    --color: var(--color-accent);
    --height: 15%;
    --overhang: var(--space-sm);
    rotate: calc( (var(--seconds) / 60) * 360 * 1deg);
  }

  .clock-icon .center-pin {
    position: absolute;
    border-radius: 100vw;
    background-color: var(--color-accent);
    width: 8%;
    aspect-ratio: 1 / 1;
    top: 50%;
    left: 50%;
    translate: -50% -50%;
  }

  .clock-icon::before {
    content: "";
    position: absolute;
    inset: var(--space-2xs);
    background-color: var(--color-background);
    border-radius: 100vw;
  }

  .clock-info {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-3xs);
  }

  .clock-info p {
    margin: 0;
  }

  .time-info {
    color: var(--color-foreground-secondary);
    display: flex;
    flex-direction: row;
    gap: var(--space-2xs);
    align-items: center;
  }

  .event-card {
    padding: var(--space-sm) var(--space-xs);
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
    border-radius: var(--radius-sm);
  }

  .event-title {
    margin: 0;
  }

  .event-info {
    border-radius: var(--radius-sm);
    text-decoration: none;
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-xs);
  }

  .event-date {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    border-right: 1px solid var(--color-border);
    padding-inline-end: var(--space-sm);
  }

  .event-day {
    margin: 0;
  }

  .event-details {

  }

  .event-location {
    color: var(--color-foreground-secondary);
  }

  .brand-cards {
    display: flex;
    flex-direction: row;
    justify-content: stretch;
    gap: var(--space-3xs);
  }

  .brand-cards > :global(*) {
    flex: 0 1 100%;
  }

  .careers-card {
    padding: var(--space-xs);
    display: flex;
    flex-direction: column;
    justify-content: stretch;
    align-items: center;
    text-align: center;
    text-decoration: none;
    border-radius: var(--radius-sm);
  }

  .careers-card:focus,
  .careers-card:focus-visible {
    outline: none;
    border: none;
  }

  /* .careers-card:focus:not(:focus-visible) {
    outline: none;
  } */

  .careers-card:focus {
    outline-offset: -2px;
  }

  .careers-icon {
    flex: 0 1 100%;
    max-width: 80%;
    width: auto;
  }

  .careers-heading {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    gap: 0em;
  }

  .careers-subheading {
    color: var(--color-foreground-secondary);
  }

  .blog-posts {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    padding: var(--space-xs);
    border-radius: var(--radius-sm);
  }

  .blog-posts-heading {
    margin-bottom: 0.8em;
  }

  @media screen and (width <= 768px) {
    .notification-menu,
    .notification-menu:popover-open,
    .notification-menu[open] {
        display: none;
    }
  }
</style>