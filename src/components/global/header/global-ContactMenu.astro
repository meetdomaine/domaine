---
import { Icon } from "astro-icon/components"

const { className, hubspotFormId, processConsentMessage, marketingConsentMessage } = Astro.props

const portalId = import.meta.env.HUBSPOT_PORTAL_ID
---
<dialog popover  id="contact-menu" class="color-invert" data-lenis-prevent>
    <div class="menu-header">
        <div>Contact</div>
        <button popovertarget="contact-menu" class="contact-close-button button-reset">
            <Icon name="pixel_x" class="close-button" />
        </button>
    </div>
    <form id="contact-form" class="contact-form">
        <div class="fields-inline">
            <label for="firstname">
                First Name
                <input type="text" name="firstname" id="firstname" required autofocus />
            </label>
            <label for="lastname">
                Last Name
                <input type="text" name="lastname" id="lastname" required />
            </label>
        </div>
        <label for="email">
            Email
            <input type="email" name="email" id="email" required />
        </label>
        <label for="company">
            Company / Organization
            <input type="text" name="company" id="company" required />
        </label>
        <label for="message">
            How Can We Help?
            <textarea name="message" id="message" rows="4" cols="50" />
        </label>
        <!-- <label for="processConsent" class="toggle">
            <input name="processConsent" id="processConsent" type="checkbox" required />
            {processConsentMessage}
        </label> -->
        <label for="marketingConsent" class="toggle">
            <input name="marketingConsent" id="marketingConsent" type="checkbox" />
            {marketingConsentMessage}
        </label>
        <input type="submit" value="Submit" />
    </form>
</aside>

<script define:vars={{ portalId, hubspotFormId, processConsentMessage, marketingConsentMessage }}>
    const contactForm = document.querySelector("#contact-form")
    const marketingConsent = contactForm.querySelector("#marketingConsent")

    const sumbitForm = async () => {

        const formData = new FormData(contactForm);

        const formBody = {
            fields: [],
            legalConsentOptions: {
                consent: { // Include this object when GDPR options are enabled
                    consentToProcess: true,
                    text: processConsentMessage,
                    communications: [
                        {
                            "value": marketingConsent.value === "on" ? true : false,
                            "subscriptionTypeId": 999,
                            "text": marketingConsentMessage
                        }
                    ]
                }
            }
        }
        

        for (const field of formData) {
            const fieldName = field[0]
            const fieldValue = field[1]
            const fieldType = fieldName === "company" ? "0-2" : "0-1"
            formBody.fields.push({
                objectTypeId: fieldType,
                name: fieldName,
                value: fieldValue
            })
        }

        try {
            const response = await fetch(`https://api.hsforms.com/submissions/v3/integration/submit/${portalId}/${hubspotFormId}`, {
                method: "POST",
                body: JSON.stringify(formBody),
                headers: {
                    "Content-type": "application/json; charset=UTF-8"
                }
            })
            console.log(await response.json())
        } catch(e) {
            console.log(e)
        }
    }

    contactForm.addEventListener("submit", (e) => {
        // console.log(e)
        e.preventDefault();
        sumbitForm();  
    })

</script>


<style>
    #contact-menu {
        --inset: var(--space-sm);
        border: none;
        margin: auto var(--inset) auto auto;
        height: calc(100% - var(--inset) * 2);
        max-width: 500px;
        background-color: color-mix(in srgb, var(--color-background) 70%, transparent);
        backdrop-filter: blur(15px);
        -webkit-backdrop-filter: blur(15px);
        border-radius: var(--radius-md);
        position: fixed;
        translate: calc(100% + var(--inset) + var(--page-margin)) 0;
        color: var(--color-foreground);
        padding-block: var(--space-md);
        z-index: 19;
        flex-direction: column;
        gap: var(--space-md);
        float: right;
        display: flex;
        transition: translate var(--anim-md), display var(--anim-md) allow-discrete;
    }

    #contact-menu:popover-open {
        translate: 0 0;
        display: flex;
    }

    #contact-menu::backdrop {
        background-color: color-mix(in srgb, var(--color-foreground) 10%, transparent);
    }

    @starting-style {
        #contact-menu:popover-open {
            display: flex;
            /* translate: calc(100% + var(--inset)) 0; */
        }
    }

    .menu-header { 
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        padding-inline: var(--space-md);
    }

    .contact-form {
        overflow-y: auto;
        padding-inline: var(--space-md);
        flex: 1 0 auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: stretch;
    }

    input[type="text"],
    input[type="tel"],
    input[type="email"] {
        border: none;
        border-bottom: 1px solid var(--color-foreground);
        padding-inline: 0;
        padding-block: var(--space-2xs);
        background-color: color-mix(in srgb, var(--color-foreground) 5%, transparent);
    }

    textarea {
        padding-block: var(--space-2xs);
        background-color: color-mix(in srgb, var(--color-foreground) 5%, transparent);
    }

    .fields-inline label {
        flex: 1 0 auto;
    }


</style>