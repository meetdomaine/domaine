---
import { getRelativeLocaleUrl } from "astro:i18n"
import AtomButton from "../../../global/atoms/atom-button.astro"
import AtomSanityMedia from "../../../global/atoms/atom-sanityMedia.astro"
import AtomTag from "../../../global/atoms/atom-tag.astro"
import { stegaClean } from '@sanity/client/stega'
import { imageFields, videoFields } from "../../../../lib/cms-queries"
import { loadQuery } from "../../../../lib/sanity-load-query";

const { locale } = Astro.props
const { data: sectionSettings } = await loadQuery({
  query: `*[_type == "page_home-domaine"][0]{
    media{ ..., ${imageFields}, ${videoFields} },
    eyebrow,
    heading,
    button,
    heroTextColor,
  }`
})
const {button, heroTextColor} = sectionSettings
const eyebrow = locale && sectionSettings.eyebrow.translations[locale] ? sectionSettings.eyebrow.translations[locale] : sectionSettings.eyebrow.text
const heading = locale && sectionSettings.heading.translations[locale] ? sectionSettings.heading.translations[locale] : sectionSettings.heading.text

---
<section id="domaine-home-hero" class="section-home-hero" data-color-scheme={stegaClean(heroTextColor) === "light" ? "invert" : ""}>
    <div class="section-content">
        <!-- {projects.map((project) => (
            <p>{project.title}</p>
        ))} -->
        <div class="section-title">
            {eyebrow && 
                <div class="eyebrow">
                    <AtomTag text={eyebrow} theme={heroTextColor === "light" ? "glass-dark" : "glass-light"} />
                </div>
            }
            <h1 class="heading h2" id="heading" >{heading}</h1>
        </div>
        {button?.label && button?.url &&
            <AtomButton 
                text={locale && button.label.translations[locale] ? button.label.translations[locale] : button.label.text}
                url={locale ? getRelativeLocaleUrl(locale, button.url) : button.url}
                newTab={button.newTab}
                style="primary"
                icon="arrow-diagonal"
            />
        }
    </div>
    {sectionSettings?.media && 
        <div class="section-media">
            <AtomSanityMedia 
                video={sectionSettings?.media.video}
                image={sectionSettings?.media.image}
                sizes="100vw"
                cover={true}
                preload={true}
                eager={true}
            />
        </div>
    }
</section>

<script>
    import { addParallax, fadeUp, gsap, SplitText } from "../../../../lib/gsap"

    const sections = document.querySelectorAll('#domaine-home-hero')

    sections.forEach((section) => {

        const backgroundMedia = section.querySelector('.section-media')
        const text = section.querySelector('.section-content')
        const video = backgroundMedia.querySelector('mux-player')

        gsap.set(text, {
            opacity: 0,
            y: 40,
        })

        if (video) {
            gsap.set(video, {
                opacity: 0
            })
            video.addEventListener("canplaythrough", (e) => {
                gsap.to(video, {
                    opacity: 1,
                    duration: 0.2
                })
            })
        }

        const animateSection = () => {
            if (backgroundMedia) { addParallax(backgroundMedia) }

            gsap.to(text, {
                opacity: 1,
                y: 0,
                duration: 1,
                ease: 'cubic'
            })
        }

        window.addEventListener("preload:complete", () => {
            animateSection()
        })
    })

</script>

<style>
    .section-home-hero {
        padding-inline: var(--page-margin);
        padding-block: var(--header-height) var(--space-2xl);
        min-height: 90svh;
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        align-items: flex-start;
        gap: var(--space-md);
        position: relative;
        overflow: clip;
    }

    .section-content {
        position: relative;
        z-index: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: flex-start;
        gap: var(--space-md);
    }
    
    .section-title {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: var(--space-sm);
    }

    .eyebrow {
        clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
    }

    .heading {
        max-width: 14em;
    }

    .section-media {
        position: absolute;
        inset: 0;
        height: 100%;
        width: 100%;
        min-width: none;
    }
</style>